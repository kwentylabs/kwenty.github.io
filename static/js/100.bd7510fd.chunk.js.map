{"version":3,"sources":["components/PageTitle.js","components/VerticalForm.js","components/FormInput.js","pages/forms/Wizard.js"],"names":["PageTitle","props","className","title","VerticalForm","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","map","child","name","React","createElement","type","key","PasswordInput","placeholder","refCallback","useState","showPassword","setShowPassword","InputGroup","Form","Control","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","FormInput","label","labelClassName","containerClass","otherProps","comp","Group","Label","Feedback","Select","Check","BasicWizard","Body","render","next","Row","htmlFor","column","md","defaultValue","variant","previous","sm","Input","WizardWithProgressbar","step","steps","animated","striped","now","indexOf","length","WizardWithFormValidation","validationSchema","yupResolver","yup","shape","email","required","password","checkbox","oneOf","validationSchema2","firstname","lastname","event","values","FormWizard","breadCrumbItems","path","active","xl","lg"],"mappings":"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","file":"static/js/100.bd7510fd.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\ntype PageTitleProps = {\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype VerticalFromProps = {\n    defaultValues?: Object,\n    resolver?: any,\n    children?: any,\n    onSubmit?: (value: any) => void,\n    formClass?: string,\n};\n\nconst VerticalForm = ({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps): React$Element<any> => {\n    /*\n     * form methods\n     */\n    const methods = useForm({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","// @flow\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                        <Form.Select\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            comp={comp}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}>\n                                            {children}\n                                        </Form.Select>\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <>\n                                            <Form.Group className={containerClass}>\n                                                <Form.Check\n                                                    type={type}\n                                                    label={label}\n                                                    name={name}\n                                                    id={name}\n                                                    ref={(r) => {\n                                                        if (refCallback) refCallback(r);\n                                                    }}\n                                                    className={className}\n                                                    isInvalid={errors && errors[name] ? true : false}\n                                                    {...(register ? register(name) : {})}\n                                                    {...otherProps}\n                                                />\n\n                                                {errors && errors[name] ? (\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors[name]['message']}\n                                                    </Form.Control.Feedback>\n                                                ) : null}\n                                            </Form.Group>\n                                        </>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}>\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Card, Form, Button, ProgressBar } from 'react-bootstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { VerticalForm, FormInput } from '../../components/';\n\nconst BasicWizard = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\"> Basic Wizard</h4>\n\n                <Wizard>\n                    <Steps>\n                        <Step\n                            id=\"login\"\n                            render={({ next }) => (\n                                <Form>\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"exampleEmail\" column md={3}>\n                                            Email\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"email\"\n                                                name=\"exampleEmail\"\n                                                id=\"exampleEmail\"\n                                                placeholder=\"Enter email\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"examplePassword\" column md={3}>\n                                            Password\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"password\"\n                                                name=\"examplePassword\"\n                                                id=\"examplePassword\"\n                                                placeholder=\"password placeholder\"\n                                                defaultValue=\"12345\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"examplerePassword\" column md={3}>\n                                            Re-Password\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"password\"\n                                                name=\"exampleRepassword\"\n                                                id=\"examplerePassword\"\n                                                placeholder=\"password\"\n                                                defaultValue=\"12345\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <ul className=\"list-inline wizard mb-0\">\n                                        <li className=\"next list-inline-item float-end\">\n                                            <Button onClick={next} variant=\"success\">\n                                                Next\n                                            </Button>\n                                        </li>\n                                    </ul>\n                                </Form>\n                            )}\n                        />\n                        <Step\n                            id=\"gandalf\"\n                            render={({ next, previous }) => (\n                                <Form>\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"fname\" column md={3}>\n                                            First Name\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"fname\"\n                                                id=\"fname\"\n                                                placeholder=\"Enter first name\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"lname\" column md={3}>\n                                            Last Name\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"lname\"\n                                                id=\"lname\"\n                                                placeholder=\"enter last name\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} className=\"mb-3\">\n                                        <Form.Label htmlFor=\"phone\" column md={3}>\n                                            Phone Number\n                                        </Form.Label>\n                                        <Col md={9}>\n                                            <Form.Control\n                                                type=\"text\"\n                                                name=\"phone\"\n                                                id=\"phone\"\n                                                placeholder=\"enter phone number\"\n                                            />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <ul className=\"list-inline wizard mb-0\">\n                                        <li className=\"previous list-inline-item\">\n                                            <Button onClick={previous} variant=\"info\">\n                                                Previous\n                                            </Button>\n                                        </li>\n                                        <li className=\"next list-inline-item float-end\">\n                                            <Button onClick={next} variant=\"success\">\n                                                Next\n                                            </Button>\n                                        </li>\n                                    </ul>\n                                </Form>\n                            )}\n                        />\n                        <Step\n                            id=\"dumbledore\"\n                            render={({ previous }) => (\n                                <Row>\n                                    <Col sm={12}>\n                                        <div className=\"text-center\">\n                                            <h2 className=\"mt-0\">\n                                                <i className=\"mdi mdi-check-all\"></i>\n                                            </h2>\n                                            <h3 className=\"mt-0\">Thank you !</h3>\n\n                                            <p className=\"w-75 mb-2 mx-auto\">\n                                                Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                dignissim eros at volutpat. In egestas mattis dui. Aliquam mattis dictum\n                                                aliquet.\n                                            </p>\n\n                                            <div className=\"mb-3\">\n                                                <Form.Check type=\"checkbox\" className=\"d-inline-block\">\n                                                    <Form.Check.Input type=\"checkbox\" />{' '}\n                                                    <Form.Check.Label>\n                                                        I agree with the Terms and Conditions\n                                                    </Form.Check.Label>\n                                                </Form.Check>\n                                            </div>\n                                        </div>\n                                    </Col>\n\n                                    <Col sm={12}>\n                                        <ul className=\"list-inline wizard mb-0\">\n                                            <li className=\"previous list-inline-item\">\n                                                <Button onClick={previous} variant=\"info\">\n                                                    Previous\n                                                </Button>\n                                            </li>\n\n                                            <li className=\"next list-inline-item float-end\">\n                                                <Button variant=\"success\">Submit</Button>\n                                            </li>\n                                        </ul>\n                                    </Col>\n                                </Row>\n                            )}\n                        />\n                    </Steps>\n                </Wizard>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst WizardWithProgressbar = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\">Wizard with Progress bar</h4>\n\n                <Wizard\n                    render={({ step, steps }) => (\n                        <>\n                            <ProgressBar\n                                animated\n                                striped\n                                variant=\"success\"\n                                now={((steps.indexOf(step) + 1) / steps.length) * 100}\n                                className=\"mb-3 progress-sm\"\n                            />\n\n                            <Steps>\n                                <Step\n                                    id=\"login\"\n                                    render={({ next }) => (\n                                        <Form>\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"exampleEmail\" column md={3}>\n                                                    Email\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"email\"\n                                                        name=\"exampleEmail\"\n                                                        id=\"exampleEmail2\"\n                                                        placeholder=\"Enter email\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"examplePassword\" column md={3}>\n                                                    Password\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"password\"\n                                                        name=\"password\"\n                                                        id=\"examplePassword2\"\n                                                        placeholder=\"password placeholder\"\n                                                        defaultValue=\"12345\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"examplerePassword\" column md={3}>\n                                                    Re-Password\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"password\"\n                                                        name=\"repassword\"\n                                                        id=\"examplerePassword2\"\n                                                        placeholder=\"password\"\n                                                        defaultValue=\"12345\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button onClick={next} variant=\"success\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </Form>\n                                    )}\n                                />\n                                <Step\n                                    id=\"gandalf\"\n                                    render={({ next, previous }) => (\n                                        <Form>\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"fname\" column md={3}>\n                                                    First Name\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"fname\"\n                                                        id=\"fname\"\n                                                        placeholder=\"Enter first name\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"lname\" column md={3}>\n                                                    Last Name\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"lname\"\n                                                        id=\"lname\"\n                                                        placeholder=\"enter last name\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} className=\"mb-3\">\n                                                <Form.Label htmlFor=\"phone\" column md={3}>\n                                                    Phone Number\n                                                </Form.Label>\n                                                <Col md={9}>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        name=\"phone\"\n                                                        id=\"phone\"\n                                                        placeholder=\"enter phone number\"\n                                                    />\n                                                </Col>\n                                            </Form.Group>\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button onClick={previous} variant=\"info\">\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button onClick={next} variant=\"success\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </Form>\n                                    )}\n                                />\n                                <Step\n                                    id=\"dumbledore\"\n                                    render={({ previous }) => (\n                                        <Row>\n                                            <Col sm={12}>\n                                                <div className=\"text-center\">\n                                                    <h2 className=\"mt-0\">\n                                                        <i className=\"mdi mdi-check-all\"></i>\n                                                    </h2>\n                                                    <h3 className=\"mt-0\">Thank you !</h3>\n\n                                                    <p className=\"w-75 mb-2 mx-auto\">\n                                                        Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                        dignissim eros at volutpat. In egestas mattis dui. Aliquam\n                                                        mattis dictum aliquet.\n                                                    </p>\n\n                                                    <div className=\"mb-3\">\n                                                        <Form.Check type=\"checkbox\" className=\"d-inline-block\">\n                                                            <Form.Check.Input type=\"checkbox\" />{' '}\n                                                            <Form.Check.Label>\n                                                                I agree with the Terms and Conditions\n                                                            </Form.Check.Label>\n                                                        </Form.Check>\n                                                    </div>\n                                                </div>\n                                            </Col>\n\n                                            <Col sm={12}>\n                                                <ul className=\"list-inline wizard mb-0\">\n                                                    <li className=\"previous list-inline-item\">\n                                                        <Button onClick={previous} variant=\"info\">\n                                                            Previous\n                                                        </Button>\n                                                    </li>\n\n                                                    <li className=\"next list-inline-item float-end\">\n                                                        <Button variant=\"success\">Submit</Button>\n                                                    </li>\n                                                </ul>\n                                            </Col>\n                                        </Row>\n                                    )}\n                                />\n                            </Steps>\n                        </>\n                    )}\n                />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst WizardWithFormValidation = () => {\n    /*\n     * form validation schema\n     */\n    const validationSchema = yupResolver(\n        yup.object().shape({\n            email: yup.string().required('Please enter Email address'),\n            password: yup.string().required('Please enter Password'),\n            checkbox: yup.bool().oneOf([true]),\n        })\n    );\n    const validationSchema2 = yupResolver(\n        yup.object().shape({\n            firstname: yup.string().required('Please enter First Name'),\n            lastname: yup.string().required('Please enter Last Name'),\n            checkbox: yup.bool().oneOf([true]),\n        })\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\">Wizard with Validation</h4>\n\n                <Wizard\n                    render={({ step, steps }) => (\n                        <>\n                            <ProgressBar\n                                animated\n                                striped\n                                variant=\"success\"\n                                now={((steps.indexOf(step) + 1) / steps.length) * 100}\n                                className=\"mb-3 progress-sm\"\n                            />\n\n                            <Steps>\n                                <Step\n                                    id=\"login\"\n                                    render={({ next }) => (\n                                        <VerticalForm onSubmit={(event, values) => next()} resolver={validationSchema}>\n                                            <FormInput\n                                                label=\"Username/Email\"\n                                                type=\"email\"\n                                                name=\"email\"\n                                                containerClass={'mb-3'}\n                                            />\n                                            <FormInput\n                                                label=\"Password\"\n                                                type=\"password\"\n                                                name=\"password\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <FormInput label=\"Remember me\" type=\"checkbox\" name=\"checkbox\" />\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button variant=\"success\" type=\"submit\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </VerticalForm>\n                                    )}\n                                />\n                                <Step\n                                    id=\"gandalf\"\n                                    render={({ next, previous }) => (\n                                        <VerticalForm onSubmit={(event, values) => next()} resolver={validationSchema2}>\n                                            <FormInput\n                                                label=\"First Name\"\n                                                type=\"text\"\n                                                name=\"firstname\"\n                                                containerClass={'mb-3'}\n                                            />\n                                            <FormInput\n                                                label=\"Last Name\"\n                                                type=\"text\"\n                                                name=\"lastname\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <FormInput\n                                                label=\"Agree to terms and conditions\"\n                                                type=\"checkbox\"\n                                                name=\"checkbox\"\n                                                containerClass={'mb-3'}\n                                            />\n\n                                            <ul className=\"list-inline wizard mb-0\">\n                                                <li className=\"previous list-inline-item\">\n                                                    <Button onClick={previous} variant=\"info\">\n                                                        Previous\n                                                    </Button>\n                                                </li>\n                                                <li className=\"next list-inline-item float-end\">\n                                                    <Button variant=\"success\" type=\"submit\">\n                                                        Next\n                                                    </Button>\n                                                </li>\n                                            </ul>\n                                        </VerticalForm>\n                                    )}\n                                />\n                                <Step\n                                    id=\"dumbledore\"\n                                    render={({ previous }) => (\n                                        <Row>\n                                            <Col sm={12}>\n                                                <div className=\"text-center\">\n                                                    <h2 className=\"mt-0\">\n                                                        <i className=\"mdi mdi-check-all\"></i>\n                                                    </h2>\n                                                    <h3 className=\"mt-0\">Thank you !</h3>\n\n                                                    <p className=\"w-75 mb-2 mx-auto\">\n                                                        Quisque nec turpis at urna dictum luctus. Suspendisse convallis\n                                                        dignissim eros at volutpat. In egestas mattis dui. Aliquam\n                                                        mattis dictum aliquet.\n                                                    </p>\n\n                                                    <div className=\"mb-3\">\n                                                        <Form.Check type=\"checkbox\" className=\"d-inline-block\">\n                                                            <Form.Check.Input type=\"checkbox\" />{' '}\n                                                            <Form.Check.Label>\n                                                                I agree with the Terms and Conditions\n                                                            </Form.Check.Label>\n                                                        </Form.Check>\n                                                    </div>\n                                                </div>\n                                            </Col>\n\n                                            <Col sm={12}>\n                                                <ul className=\"list-inline wizard mb-0\">\n                                                    <li className=\"previous list-inline-item\">\n                                                        <Button onClick={previous} variant=\"info\">\n                                                            Previous\n                                                        </Button>\n                                                    </li>\n\n                                                    <li className=\"next list-inline-item float-end\">\n                                                        <Button variant=\"success\">Submit</Button>\n                                                    </li>\n                                                </ul>\n                                            </Col>\n                                        </Row>\n                                    )}\n                                />\n                            </Steps>\n                        </>\n                    )}\n                />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormWizard = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/ui/forms/wizard' },\n                    { label: 'Form Wizard', path: '/ui/forms/wizard', active: true },\n                ]}\n                title={'Form Wizard'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <BasicWizard />\n                </Col>\n\n                <Col xl={6}>\n                    <WizardWithProgressbar />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <WizardWithFormValidation />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default FormWizard;\n"],"sourceRoot":""}