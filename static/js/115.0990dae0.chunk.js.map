{"version":3,"sources":["layouts/Horizontal/Menu.js","layouts/Horizontal/Navbar.js","constants/menu.js","helpers/menu.js"],"names":["MenuItemWithChildren","item","tag","linkClassName","className","subMenuClassNames","activeMenuItems","toggleMenu","Tag","useState","includes","key","open","setOpen","showMenu","window","screen","width","useEffect","classNames","to","onClick","e","preventDefault","status","active","id","role","icon","label","children","show","map","child","i","Fragment","MenuItem","MenuItemLink","url","target","withRouter","menuItems","location","menuRef","useRef","topnavMenuItems","setTopnavMenuItems","setActiveMenuItems","menuItem","findAllParent","activeMenu","useCallback","div","document","getElementById","matchingMenuItem","items","getElementsByTagName","length","pathname","mid","getAttribute","activeMt","findMenuItem","modifiedMenuItems","filter","isTitle","defaultDisplayedItems","displayedItems","slice","moreChildren","parentKey","otherItems","path","ref","idx","Navbar","props","Collapse","in","isMenuOpened","getMenuItems","MENU_ITEMS","badge","variant","text","parents","parent","push","menuItemKey","found"],"mappings":"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","file":"static/js/115.0990dae0.chunk.js","sourcesContent":["// @flow\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { findAllParent, findMenuItem } from '../../helpers/menu';\n\nconst MenuItemWithChildren = ({\n    item,\n    tag,\n    linkClassName,\n    className,\n    subMenuClassNames,\n    activeMenuItems,\n    toggleMenu,\n}) => {\n    const Tag = tag;\n\n    const [open, setOpen] = useState(activeMenuItems.includes(item.key));\n\n    const showMenu = window.screen.width <= 768 && open;\n\n    useEffect(() => {\n        setOpen(activeMenuItems.includes(item.key));\n    }, [activeMenuItems, item]);\n\n    const toggleMenuItem = (e) => {\n        e.preventDefault();\n        const status = !open;\n        setOpen(status);\n        if (toggleMenu) toggleMenu(item, status);\n        return false;\n    };\n\n    return (\n        <Tag className={classNames('dropdown', className, activeMenuItems.includes(item.key) ? 'active' : '')}>\n            <Link\n                to=\"/#\"\n                onClick={toggleMenuItem}\n                data-menu-key={item.key}\n                className={classNames('dropdown-toggle', 'arrow-none', linkClassName, {\n                    active: activeMenuItems.includes(item.key),\n                })}\n                id={item.key}\n                role=\"button\"\n                data-bs-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded={open}>\n                {item.icon && <i className={item.icon}></i>}\n                <span> {item.label} </span>\n                <div className=\"arrow-down\"></div>\n            </Link>\n\n            {item.children ? (\n                <div className={classNames(subMenuClassNames, { show: showMenu })} aria-labelledby={item.key}>\n                    {item.children.map((child, i) => {\n                        return (\n                            <React.Fragment key={i}>\n                                {child.children ? (\n                                    <>\n                                        {/* parent */}\n                                        <MenuItemWithChildren\n                                            item={child}\n                                            tag=\"div\"\n                                            linkClassName={classNames(\n                                                'dropdown-item',\n                                                activeMenuItems.includes(child.key) ? 'active' : ''\n                                            )}\n                                            activeMenuItems={activeMenuItems}\n                                            className=\"\"\n                                            subMenuClassNames=\"dropdown-menu\"\n                                            toggleMenu={toggleMenu}\n                                        />\n                                    </>\n                                ) : (\n                                    <>\n                                        {/* child */}\n                                        <MenuItemLink\n                                            item={child}\n                                            className={classNames('dropdown-item', {\n                                                active: activeMenuItems.includes(child.key),\n                                            })}\n                                        />\n                                    </>\n                                )}\n                            </React.Fragment>\n                        );\n                    })}\n                </div>\n            ) : null}\n        </Tag>\n    );\n};\n\nconst MenuItem = ({ item, className, linkClassName }) => {\n    return (\n        <li className={classNames('nav-item', className)}>\n            <MenuItemLink item={item} className={linkClassName} />\n        </li>\n    );\n};\n\nconst MenuItemLink = ({ item, className }) => {\n    return (\n        <Link to={item.url} target={item.target} className={classNames(className)} data-menu-key={item.key}>\n            {item.icon && <i className={item.icon}></i>}\n            <span> {item.label} </span>\n        </Link>\n    );\n};\n\n/**\n * Renders the application menu\n */\n\ntype AppMenuProps = {\n    menuItems: Array<any>,\n    location: {\n        hash: string,\n        key: string,\n        pathname: string,\n        search: string,\n        state: any,\n    },\n};\n\nconst AppMenu = ({ menuItems, location }: AppMenuProps) => {\n    const menuRef = useRef(null);\n\n    const [topnavMenuItems, setTopnavMenuItems] = useState([]);\n    const [activeMenuItems, setActiveMenuItems] = useState([]);\n\n    /*\n     * toggle the menus\n     */\n    const toggleMenu = (menuItem, show) => {\n        if (show) setActiveMenuItems([menuItem['key'], ...findAllParent(topnavMenuItems, menuItem)]);\n    };\n\n    /**\n     * activate the menuitems\n     */\n    const activeMenu = useCallback(() => {\n        const div = document.getElementById('main-side-menu');\n        let matchingMenuItem = null;\n\n        if (div) {\n            let items: any = div.getElementsByTagName('a');\n            for (let i = 0; i < items.length; ++i) {\n                if (location.pathname === items[i].pathname) {\n                    matchingMenuItem = items[i];\n                    break;\n                }\n            }\n\n            if (matchingMenuItem) {\n                const mid = matchingMenuItem.getAttribute('data-menu-key');\n                const activeMt = findMenuItem(topnavMenuItems, mid);\n                if (activeMt) {\n                    setActiveMenuItems([activeMt['key'], ...findAllParent(topnavMenuItems, activeMt)]);\n                }\n            }\n        }\n    }, [location.pathname, topnavMenuItems]);\n\n    useEffect(() => {\n        //controlling how many menu items can be displayed in it\n        let modifiedMenuItems = menuItems ? menuItems.filter((item) => (!item.isTitle ? item : null)) : [];\n        const defaultDisplayedItems = window.screen.width > 1366 ? 7 : 5;\n\n        if (modifiedMenuItems.length > defaultDisplayedItems) {\n            const displayedItems = modifiedMenuItems.slice(0, defaultDisplayedItems);\n\n            const moreChildren = modifiedMenuItems\n                .slice(defaultDisplayedItems, menuItems.length)\n                .map((i) => ({ ...i, parentKey: 'more' }));\n\n            const otherItems = {\n                id: modifiedMenuItems.length + 1,\n                path: '/',\n                label: 'More',\n                icon: 'uil-ellipsis-h',\n                key: 'more',\n                children: moreChildren,\n            };\n            modifiedMenuItems = [...displayedItems, otherItems];\n            setTopnavMenuItems(modifiedMenuItems);\n        } else {\n            setTopnavMenuItems(modifiedMenuItems);\n        }\n    }, [menuItems]);\n\n    useEffect(() => {\n        if (topnavMenuItems && topnavMenuItems.length > 0) activeMenu();\n    }, [activeMenu, topnavMenuItems]);\n\n    return (\n        <>\n            <ul className=\"navbar-nav\" ref={menuRef} id=\"main-side-menu\">\n                {(topnavMenuItems || []).map((item, idx) => {\n                    return (\n                        <React.Fragment key={idx}>\n                            {item.children ? (\n                                <MenuItemWithChildren\n                                    item={item}\n                                    tag=\"li\"\n                                    className=\"nav-item\"\n                                    subMenuClassNames=\"dropdown-menu\"\n                                    activeMenuItems={activeMenuItems}\n                                    linkClassName=\"nav-link\"\n                                    toggleMenu={toggleMenu}\n                                />\n                            ) : (\n                                <MenuItem\n                                    item={item}\n                                    linkClassName=\"nav-link dropdown-toggle arrow-none\"\n                                    className={{ active: activeMenuItems.includes(item.key) }}\n                                />\n                            )}\n                        </React.Fragment>\n                    );\n                })}\n            </ul>\n        </>\n    );\n};\n\nexport default (withRouter(AppMenu): any);\n","// @flow\nimport React from 'react';\nimport AppMenu from './Menu';\nimport { Collapse } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { getMenuItems } from '../../helpers/menu';\n\ntype NavbarProps = {\n    isMenuOpened?: boolean,\n};\n\nconst Navbar = (props: NavbarProps): React$Element<React$FragmentType> => {\n    // change the inputTheme value to light for creative theme\n    const inputTheme = 'dark';\n\n    return (\n        <>\n            <div className=\"topnav\">\n                <div className=\"container-fluid\">\n                    <nav className={classNames('navbar', 'navbar-expand-lg', 'topnav-menu', 'navbar-' + inputTheme)}>\n                        <Collapse in={props.isMenuOpened} className=\"navbar-collapse\" id=\"topnav-menu-content\">\n                            <div>\n                                <AppMenu menuItems={getMenuItems()} />\n                            </div>\n                        </Collapse>\n                    </nav>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Navbar;\n","const MENU_ITEMS = [\n    {\n        key: 'dashboard',\n        label: 'Dashboard',\n        isTitle: false,\n        icon: 'uil-home-alt',\n        url: '/dashboard'\n    },\n    {\n        key: 'apps-calendar',\n        label: 'Calendar',\n        isTitle: false,\n        icon: 'uil-calender',\n        url: '/apps/calendar',\n    },\n    {\n        key: 'apps-projects',\n        label: 'Projects',\n        isTitle: false,\n        icon: 'uil-briefcase',\n        children: [\n            {\n                key: 'project-list',\n                label: 'List',\n                url: '/apps/projects/list',\n                parentKey: 'apps-projects',\n            },\n            {\n                key: 'project-details',\n                label: 'Details',\n                url: '/apps/projects/details',\n                parentKey: 'apps-projects',\n            },\n            {\n                key: 'project-gantt',\n                label: 'Gantt',\n                url: '/apps/projects/gantt',\n                badge: { variant: 'light-lighten', text: 'New' },\n                parentKey: 'apps-projects',\n            },\n            {\n                key: 'project-create-project',\n                label: 'Create Project',\n                url: '/apps/projects/new',\n                badge: { variant: 'success-lighten', text: 'New' },\n                parentKey: 'apps-projects',\n            },\n        ],\n    },\n    {\n        key: 'apps-tasks',\n        label: 'Tasks',\n        isTitle: false,\n        icon: 'uil-clipboard-alt',\n        children: [\n            {\n                key: 'task-list',\n                label: 'List',\n                url: '/apps/tasks/list',\n                parentKey: 'apps-tasks',\n            },\n            {\n                key: 'task-details',\n                label: 'Details',\n                url: '/apps/tasks/details',\n                parentKey: 'apps-tasks',\n            },\n            {\n                key: 'task-kanban',\n                label: 'Kanban Board',\n                url: '/apps/tasks/kanban',\n                parentKey: 'apps-tasks',\n            },\n        ],\n    },\n    {\n        key: 'apps-file-manager',\n        label: 'File Manager',\n        isTitle: false,\n        icon: 'uil-folder-plus',\n        url: '/apps/file',\n    },\n    {\n        key: 'apps-estimates',\n        label: 'Estimates',\n        isTitle: false,\n        icon: 'uil-file-contract-dollar',\n        url: '/apps/estimates',\n    }\n];\n\nexport default MENU_ITEMS;\n","import MENU_ITEMS from '../constants/menu';\n\nconst getMenuItems = () => {\n    // NOTE - You can fetch from server and return here as well\n    return MENU_ITEMS;\n};\n\nconst findAllParent = (menuItems, menuItem) => {\n    let parents = [];\n    const parent = findMenuItem(menuItems, menuItem['parentKey']);\n\n    if (parent) {\n        parents.push(parent['key']);\n        if (parent['parentKey']) parents = [...parents, ...findAllParent(menuItems, parent)];\n    }\n    return parents;\n};\n\nconst findMenuItem = (menuItems, menuItemKey) => {\n    if (menuItems && menuItemKey) {\n        for (var i = 0; i < menuItems.length; i++) {\n            if (menuItems[i].key === menuItemKey) {\n                return menuItems[i];\n            }\n            var found = findMenuItem(menuItems[i].children, menuItemKey);\n            if (found) return found;\n        }\n    }\n    return null;\n};\n\nexport { getMenuItems, findAllParent, findMenuItem };\n"],"sourceRoot":""}