{"version":3,"sources":["pages/uikit/Popovers.js","components/PageTitle.js"],"names":["Basic","popover","id","Header","as","Body","className","trigger","placement","overlay","variant","Direction","map","popper","DimissibleOnClick","DisabledPopover","disabled","style","pointerEvents","HoverPopover","Popovers","breadCrumbItems","label","path","active","title","xl","PageTitle","props","listProps","Item","href","item","index"],"mappings":"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","file":"static/js/129.257c35e8.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Card, Popover, Button, OverlayTrigger } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\nconst Basic = () => {\n    const popover = (\n        <Popover id=\"popover-basic\">\n            <Popover.Header as=\"h3\">Popover right</Popover.Header>\n            <Popover.Body>And here's some amazing content. It's very engaging. Right?</Popover.Body>\n        </Popover>\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Simple Popover</h4>\n                <p className=\"text-muted font-14\">\n                    Popover is a component which displays a box with a content after a click on an element - similar to\n                    the tooltip but can contain more content.\n                </p>\n                <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\n                    <Button variant=\"danger\">Click me to see</Button>\n                </OverlayTrigger>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Direction = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Four Directions</h4>\n                <p className=\"text-muted font-14\">Four options are available: top, right, bottom, and left aligned.</p>\n\n                {['top', 'bottom', 'right', 'left'].map((placement) => (\n                    <OverlayTrigger\n                        trigger=\"click\"\n                        key={placement}\n                        placement={placement}\n                        overlay={\n                            <Popover popper id={`popover-positioned-${placement}`}>\n                                <Popover.Body>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</Popover.Body>\n                            </Popover>\n                        }>\n                        <Button variant=\"primary\" className=\"me-1\">\n                            Popover on {placement}\n                        </Button>\n                    </OverlayTrigger>\n                ))}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DimissibleOnClick = () => {\n    const popover = (\n        <Popover>\n            <Popover.Header as=\"h3\">Dismissible popover</Popover.Header>\n            <Popover.Body>And here's some amazing content. It's very engaging. Right?</Popover.Body>\n        </Popover>\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Dismiss on Next Click</h4>\n                <p className=\"text-muted font-14\">\n                    Use the <code>trigger</code> attribute with value <code>focus</code> to dismiss popovers on the\n                    user's next click of a different element than the toggle element.\n                </p>\n                <OverlayTrigger trigger=\"focus\" placement=\"right\" overlay={popover}>\n                    <Button variant=\"success\">Dismissible popover</Button>\n                </OverlayTrigger>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DisabledPopover = () => {\n    const popover = (\n        <Popover>\n            <Popover.Body>Disabled popover</Popover.Body>\n        </Popover>\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Disabled Elements</h4>\n                <p className=\"text-muted font-14\">\n                    Elements with the <code>disabled</code> attribute aren’t interactive, meaning users cannot hover or\n                    click them to trigger a popover (or tooltip). As a workaround, you’ll want to trigger the popover\n                    from a wrapper <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code> and override the{' '}\n                    <code>pointer-events</code> on the disabled element.\n                </p>\n                <OverlayTrigger placement=\"right\" overlay={popover}>\n                    <span className=\"d-inline-block\">\n                        <Button disabled style={{ pointerEvents: 'none' }}>\n                            Disabled button\n                        </Button>\n                    </span>\n                </OverlayTrigger>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HoverPopover = () => {\n    const popover = (\n        <Popover id=\"popover-basic\">\n            <Popover.Header as=\"h3\">Ohh Wow !</Popover.Header>\n            <Popover.Body>And here's some amazing content. It's very engaging. Right?</Popover.Body>\n        </Popover>\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Hover</h4>\n                <p className=\"text-muted font-14\">\n                    Use the <code>trigger</code> attribute with value <code>hover</code> to show popover on hovering the\n                    element.\n                </p>\n                <OverlayTrigger trigger={['hover', 'focus']} placement=\"right\" overlay={popover}>\n                    <Button variant=\"dark\">Please Hover me</Button>\n                </OverlayTrigger>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Popovers = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/popovers' },\n                    { label: 'Popovers', path: '/ui/popovers', active: true },\n                ]}\n                title={'Popovers'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <Basic />\n                    <DimissibleOnClick />\n                    <HoverPopover />\n                </Col>\n                <Col xl={6}>\n                    <Direction />\n                    <DisabledPopover />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Popovers;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/\">Hyper</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={item.path}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n"],"sourceRoot":""}