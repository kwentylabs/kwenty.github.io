{"version":3,"sources":["pages/forms/FileUpload.js","components/PageTitle.js","../node_modules/react-bootstrap/esm/divWithClassName.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","components/FileUploader.js"],"names":["FileUpload","breadCrumbItems","label","path","active","title","Body","className","onFileUpload","files","console","log","PageTitle","props","React","p","ref","_jsx","classNames","context","displayName","CardImg","bsPrefix","variant","as","Component","prefix","useBootstrapPrefix","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","Provider","value","children","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","Card","bg","text","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Link","Text","Header","Footer","ImgOverlay","FileUploader","useState","selectedFiles","setSelectedFiles","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","parseFloat","pow","toFixed","onDrop","acceptedFiles","allFiles","showPreview","map","file","preview","split","URL","createObjectURL","formattedSize","size","push","handleAcceptedFiles","getRootProps","getInputProps","length","id","f","alt","name","src","type","to","onClick","newFiles","splice","indexOf","removeFile"],"mappings":"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","file":"static/js/88.ebc327b4.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport FileUploader from '../../components/FileUploader';\n\nconst FileUpload = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/forms/upload' },\n                    { label: 'Form Upload', path: '/forms/upload', active: true },\n                ]}\n                title={'Form Upload'}\n            />\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title mb-3\">Dropzone File Upload</h4>\n\n                            <p className=\"text-muted font-13 m-b-30\">\n                                DropzoneJS is an open source library that provides drag’n’drop file uploads with image\n                                previews.\n                            </p>\n\n                            <FileUploader\n                                onFileUpload={(files) => {\n                                    console.log(files);\n                                }}\n                            />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default FileUpload;\n","// @flow\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\ntype PageTitleProps = {\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","// @flow\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport Dropzone from 'react-dropzone';\n\ntype FileUploaderProps = {\n    onFileUpload?: (files: any) => void,\n    showPreview?: boolean,\n};\n\nconst FileUploader = (props: FileUploaderProps): React$Element<any> => {\n    const [selectedFiles, setSelectedFiles] = useState([]);\n\n    /**\n     * Handled the accepted files and shows the preview\n     */\n    const handleAcceptedFiles = (files) => {\n        var allFiles = files;\n\n        if (props.showPreview) {\n            files.map((file) =>\n                Object.assign(file, {\n                    preview: file['type'].split('/')[0] === 'image' ? URL.createObjectURL(file) : null,\n                    formattedSize: formatBytes(file.size),\n                })\n            );\n\n            allFiles = [...selectedFiles];\n            allFiles.push(...files);\n            setSelectedFiles(allFiles);\n        }\n\n        if (props.onFileUpload) props.onFileUpload(allFiles);\n    };\n\n    /**\n     * Formats the size\n     */\n    const formatBytes = (bytes, decimals = 2) => {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const dm = decimals < 0 ? 0 : decimals;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    };\n\n    /*\n     * Removes the selected file\n     */\n    const removeFile = (file) => {\n        const newFiles = [...selectedFiles];\n        newFiles.splice(newFiles.indexOf(file), 1);\n        setSelectedFiles(newFiles);\n    };\n\n    return (\n        <>\n            <Dropzone {...props} onDrop={(acceptedFiles) => handleAcceptedFiles(acceptedFiles)}>\n                {({ getRootProps, getInputProps }) => (\n                    <div className=\"dropzone\">\n                        <div className=\"dz-message needsclick\" {...getRootProps()}>\n                            <input {...getInputProps()} />\n                            <i className=\"h3 text-muted dripicons-cloud-upload\"></i>\n                            <h5>Drop files here or click to upload.</h5>\n                            <span className=\"text-muted font-13\">\n                                (This is just a demo dropzone. Selected files are <strong>not</strong> actually\n                                uploaded.)\n                            </span>\n                        </div>\n                    </div>\n                )}\n            </Dropzone>\n\n            {props.showPreview && selectedFiles.length > 0 && (\n                <div className=\"dropzone-previews mt-3\" id=\"uploadPreviewTemplate\">\n                    {(selectedFiles || []).map((f, i) => {\n                        return (\n                            <Card className=\"mt-1 mb-0 shadow-none border\" key={i + '-file'}>\n                                <div className=\"p-2\">\n                                    <Row className=\"align-items-center\">\n                                        {f.preview && (\n                                            <Col className=\"col-auto\">\n                                                <img\n                                                    data-dz-thumbnail=\"\"\n                                                    className=\"avatar-sm rounded bg-light\"\n                                                    alt={f.name}\n                                                    src={f.preview}\n                                                />\n                                            </Col>\n                                        )}\n                                        {!f.preview && (\n                                            <Col className=\"col-auto\">\n                                                <div className=\"avatar-sm\">\n                                                    <span className=\"avatar-title bg-primary rounded\">\n                                                        {f.type.split('/')[0]}\n                                                    </span>\n                                                </div>\n                                            </Col>\n                                        )}\n                                        <Col className=\"ps-0\">\n                                            <Link to=\"#\" className=\"text-muted fw-bold\">\n                                                {f.name}\n                                            </Link>\n                                            <p className=\"mb-0\">\n                                                <strong>{f.formattedSize}</strong>\n                                            </p>\n                                        </Col>\n                                        <Col className=\"text-end\">\n                                            <Link to=\"#\" className=\"btn btn-link btn-lg text-muted shadow-none\">\n                                                <i className=\"dripicons-cross\" onClick={() => removeFile(i)}></i>\n                                            </Link>\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </Card>\n                        );\n                    })}\n                </div>\n            )}\n        </>\n    );\n};\n\nFileUploader.defaultProps = {\n    showPreview: true,\n};\n\nexport default FileUploader;\n"],"sourceRoot":""}