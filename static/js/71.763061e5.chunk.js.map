{"version":3,"sources":["components/Spinner.js","pages/uikit/Spinners.js","components/PageTitle.js","../node_modules/react-bootstrap/esm/divWithClassName.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Row.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/Button.js"],"names":["Spinner","props","children","Tag","tag","color","size","role","className","classNames","type","defaultProps","colors","BorderedSpinners","Card","Body","GrowingSpinners","Variants","map","index","SpinnersSizes","ButtonSpinners","Button","disabled","Spinners","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","xl","React","p","ref","_jsx","context","displayName","_excluded","useButtonProps","tagName","href","target","rel","onClick","tabIndex","meta","handleClick","event","trim","isTrivialHref","preventDefault","stopPropagation","undefined","onKeyDown","key","_ref","asProp","as","source","excluded","i","sourceKeys","Object","keys","length","indexOf","_objectWithoutPropertiesLoose","assign","buttonProps","Component","bsPrefix","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","CardImg","variant","prefix","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","Provider","value","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","Img","Title","Subtitle","Link","Text","Header","Footer","ImgOverlay"],"mappings":"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","file":"static/js/71.763061e5.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport classNames from 'classnames';\n\ntype SpinnerProps = {\n    tag?: string,\n    className?: string,\n    size?: 'lg' | 'md' | 'sm',\n    type?: 'bordered' | 'grow',\n    color?: string,\n    children?: any,\n};\n\n/**\n * Spinner\n */\nconst Spinner = (props: SpinnerProps): React$Element<any> => {\n    const children = props.children || null;\n    const Tag = props.tag || 'div';\n    const color = props.color || 'secondary';\n    const size = props.size || '';\n\n    return (\n        <Tag\n            role=\"status\"\n            className={classNames(\n                {\n                    'spinner-border': props.type === 'bordered',\n                    'spinner-grow': props.type === 'grow',\n                },\n                [`text-${color}`],\n                { [`avatar-${size}|`]: size },\n                props.className\n            )}>\n            {children}\n        </Tag>\n    );\n};\n\nSpinner.defaultProps = {\n    tag: 'div',\n    type: 'bordered',\n};\n\nexport default Spinner;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport Spinner from '../../components/Spinner';\n\nconst colors = ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'];\n\nconst BorderedSpinners = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Border spinner</h4>\n                <p className=\"text-muted mb-4\">Use the border spinners for a lightweight loading indicator.</p>\n                <Spinner />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst GrowingSpinners = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Growing spinner</h4>\n                <p className=\"text-muted mb-4\">\n                    You can go for growing spinner as well. While it doesn’t technically spin, it does repeatedly grow!\n                </p>\n                <Spinner type=\"grow\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Variants = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Variants</h4>\n                <p className=\"text-muted mb-4\">\n                    All standard visual variants are available for both animation styles by setting the{' '}\n                    <code>variant</code> property.\n                </p>\n\n                {colors.map((color, index) => {\n                    return <Spinner key={index} className=\"m-2\" color={color} />;\n                })}\n\n                {colors.map((color, index) => {\n                    return <Spinner key={index} className=\"m-2\" type=\"grow\" color={color} />;\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst SpinnersSizes = () => {\n    const sizes = ['lg', 'md', 'sm'];\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Size</h4>\n                <p className=\"text-muted mb-4\">\n                    Add <code>size</code> attribute to make spinner with sizes including lg, md or sm.\n                </p>\n                <div className=\"row\">\n                    {sizes.map((size, index) => {\n                        return (\n                            <div key={index} className=\"col-lg-6\">\n                                <Spinner className=\"text-primary m-2\" color=\"primary\" size={size} />\n                                <Spinner className=\"text-secondary m-2\" type=\"grow\" size={size} />\n                            </div>\n                        );\n                    })}\n                    <div className=\"col-lg-6\">\n                        <Spinner className=\"spinner-border-sm m-2\" />\n                        <Spinner type=\"grow\" className=\"spinner-grow-sm m-2\" />\n                    </div>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ButtonSpinners = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Buttons spinner</h4>\n                <p className=\"text-muted mb-4\">\n                    Use spinners within buttons to indicate an action is currently processing or taking place. You may\n                    also swap the text out of the spinner element and utilize button text as needed.\n                </p>\n                <div className=\"row\">\n                    <div className=\"col-lg-6\">\n                        <div className=\"button-list\">\n                            <Button color=\"primary\" disabled>\n                                <Spinner className=\"spinner-border-sm\" tag=\"span\" color=\"white\" />\n                                <span className=\"visually-hidden\">Loading...</span>\n                            </Button>\n\n                            <Button color=\"primary\" disabled>\n                                <Spinner className=\"spinner-border-sm me-1\" tag=\"span\" color=\"white\" />\n                                Loading...\n                            </Button>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-6\">\n                        <div className=\"button-list\">\n                            <Button color=\"primary\" disabled>\n                                <Spinner className=\"spinner-grow-sm\" tag=\"span\" color=\"white\" type=\"grow\" />\n                                <span className=\"visually-hidden\">Loading...</span>\n                            </Button>\n\n                            <Button color=\"primary\" disabled>\n                                <Spinner className=\"spinner-grow-sm me-1\" tag=\"span\" color=\"white\" type=\"grow\" />\n                                Loading...\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Spinners = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/spinners' },\n                    { label: 'Spinners', path: '/ui/spinners', active: true },\n                ]}\n                title={'Spinners'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <BorderedSpinners />\n                    <Variants />\n\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"mt-0 header-title\">Alignment</h4>\n                            <p className=\"text-muted mb-4\">\n                                Use flexbox utilities, float utilities, or text alignment utilities to place spinners\n                                exactly where you need them in any situation.\n                            </p>\n                            <div className=\"d-flex justify-content-center\">\n                                <Spinner />\n                            </div>\n                        </Card.Body>\n                    </Card>\n\n                    <SpinnersSizes />\n                </Col>\n\n                <Col xl={6}>\n                    <GrowingSpinners />\n\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"mt-0 header-title\">Placement</h4>\n                            <p className=\"text-muted mb-4\">\n                                Use <code>flexbox utilities</code>, <code>float utilities</code>, or{' '}\n                                <code>text alignment</code> utilities to place spinners exactly where you need them in\n                                any situation.\n                            </p>\n                            <div className=\"d-flex align-items-center\">\n                                <strong>Loading...</strong>\n                                <Spinner className=\"ms-auto\" />\n                            </div>\n                        </Card.Body>\n                    </Card>\n\n                    <ButtonSpinners />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Spinners;\n","// @flow\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\ntype PageTitleProps = {\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","const _excluded = [\"as\", \"disabled\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n\n  const meta = {\n    tagName\n  };\n\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    onClick == null ? void 0 : onClick(event);\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n\n    if (disabled) {\n      href = undefined;\n    }\n  }\n\n  return [{\n    role: 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    as: asProp,\n    disabled\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...buttonProps,\n    ...props,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;"],"sourceRoot":""}