{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getEventValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/logic/getProxyFormState.ts","../../src/useFormContext.tsx","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/utils/isFunction.ts","../../src/utils/objectHasFunction.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/isWatched.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getDirtyFields.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/utils/isRegex.ts","../../src/logic/getRuleValue.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","element","type","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","obj","path","defaultValue","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","createContext","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","get","_key","keys","length","formStateData","omit","isEmptyObject","find","useSubscribe","props","_props","useRef","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","ref","focus","refs","isBlurEvent","has","watchName","startsWith","slice","cloneObject","Set","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","isConnected","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","markFieldsDirty","isParentNodeArray","objectHasFunction","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","isValid","validResult","options","values","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","RegExp","rule","isRegex","mount","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","join","foundError","pop","isTouched","isSubmitted","reValidateMode","isValidElement","getValidateError","isBoolean","validationData","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","dirtyFields","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","unregister","getValues","_getWatch","generateWatchOutput","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","cloneValue","onChange","getEventValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","all","shouldFocus","getFieldState","invalid","clearErrors","inputName","setError","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","shouldSelect","select","control","useForm","_formControl","useState","updateFormState","useCallback","shouldRenderFormState","getProxyFormState","React","displayName","InputGroupText","createWithBsPrefix","Component","InputGroup","bsPrefix","size","className","as","useBootstrapPrefix","contextValue","useMemo","_jsx","InputGroupContext","Provider","children","classNames","assign","Text","Radio","FormCheckInput","Checkbox"],"mappings":"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","file":"static/js/3.f3c8aa3b.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default <TValue>(value: TValue[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {} as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <TFieldValues extends FieldValues, TContext = any>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter((data) => !isUndefined(data)).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || +inputValue;\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (\n      _proxyFormState.isValidating &&\n      !Object.values(validateFields).some((v) => v)\n    ) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps &&\n        trigger(\n          field._f.deps as FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n        );\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [...refs.filter(live), fieldRef],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          if (onInvalid) {\n            await onInvalid({ ..._formState.errors }, e);\n          }\n\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name)._f;\n    const fieldRef = field.refs ? field.refs[0] : field.ref;\n    options.shouldSelect ? fieldRef.select() : fieldRef.focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to mange the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\n\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\n\n/**\n *\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group'); // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"sourceRoot":""}