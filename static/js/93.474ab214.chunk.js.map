{"version":3,"sources":["components/PageTitle.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Button.js","components/Pagination.js","components/Table.js","pages/apps/Team/index.js"],"names":["PageTitle","props","className","title","_excluded","useButtonProps","tagName","disabled","href","target","rel","onClick","tabIndex","type","meta","handleClick","event","trim","isTrivialHref","preventDefault","stopPropagation","undefined","role","onKeyDown","key","Button","React","_ref","ref","asProp","as","source","excluded","i","sourceKeys","Object","keys","length","indexOf","_objectWithoutPropertiesLoose","assign","buttonProps","Component","_jsx","displayName","bsPrefix","variant","size","active","prefix","useBootstrapPrefix","classNames","defaultProps","Pagination","tableProps","sizePerPageList","useState","pageCount","setPageCount","state","pageIndex","setPageIndex","useEffect","filterPages","useCallback","visiblePages","totalPages","filter","page","getVisiblePages","total","changePage","setVisiblePages","gotoPage","activePage","value","pageSize","onChange","e","setPageSize","Number","map","index","text","pageOptions","min","to","array","Fragment","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","searchBoxClass","count","setValue","useAsyncDebounce","placeholder","IndeterminateCheckbox","forwardRef","indeterminate","rest","defaultRef","useRef","resolvedRef","current","htmlFor","Table","isSearchable","isSortable","pagination","isSelectable","isExpandable","dataTable","useTable","columns","data","initialState","useGlobalFilter","useSortBy","useExpanded","usePagination","useRowSelect","hooks","visibleColumns","push","id","Header","getToggleAllPageRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getToggleAllRowsExpandedProps","isAllRowsExpanded","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","isExpanded","rows","getTableProps","headerGroups","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","sort","getSortByToggleProps","sorting_desc","isSortedDesc","sorting_asc","sortable","render","getTableBodyProps","prepareRow","getRowProps","cells","cell","getCellProps","api","APICore","accessor","src","original","avatar","alt","name","classes","status","Team","xs","Body","xl","getTeamMembers","tableClass"],"mappings":"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","file":"static/js/93.474ab214.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\ntype PageTitleProps = {\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","const _excluded = [\"as\", \"disabled\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n\n  const meta = {\n    tagName\n  };\n\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    onClick == null ? void 0 : onClick(event);\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n\n    if (disabled) {\n      href = undefined;\n    }\n  }\n\n  return [{\n    role: 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    as: asProp,\n    disabled\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...buttonProps,\n    ...props,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","// @flow\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype PaginationProps = {\n    tableProps: any,\n    sizePerPageList: {\n        text: string,\n        value: number,\n    }[],\n};\n\nconst Pagination = ({ tableProps, sizePerPageList }: PaginationProps): React$Element<any> => {\n    /**\n     * pagination count , index\n     */\n    const [pageCount, setPageCount] = useState(tableProps.pageCount);\n    const [pageIndex, setPageIndex] = useState(tableProps.state.pageIndex);\n\n    useEffect(() => {\n        setPageCount(tableProps.pageCount);\n        setPageIndex(tableProps.state.pageIndex);\n    }, [tableProps.pageCount, tableProps.state.pageIndex]);\n\n    /**\n     * get filter pages\n     */\n    const filterPages = useCallback(\n        (visiblePages, totalPages) => {\n            return visiblePages.filter((page) => page <= pageCount);\n        },\n        [pageCount]\n    );\n\n    /**\n     * handle visible pages\n     */\n    const getVisiblePages = useCallback(\n        (page: number, total) => {\n            if (total < 7) {\n                return filterPages([1, 2, 3, 4, 5, 6], total);\n            } else {\n                if (page % 5 >= 0 && page > 4 && page + 2 < total) {\n                    return [1, page - 1, page, page + 1, total];\n                } else if (page % 5 >= 0 && page > 4 && page + 2 >= total) {\n                    return [1, total - 3, total - 2, total - 1, total];\n                } else {\n                    return [1, 2, 3, 4, 5, total];\n                }\n            }\n        },\n        [filterPages]\n    );\n\n    /**\n     * handle page change\n     * @param page - current page\n     * @returns\n     */\n    const changePage = (page) => {\n        const activePage = pageIndex + 1;\n\n        if (page === activePage) {\n            return;\n        }\n\n        const visiblePages = getVisiblePages(page, pageCount);\n        setVisiblePages(filterPages(visiblePages, pageCount));\n\n        tableProps.gotoPage(page - 1);\n    };\n\n    useEffect(() => {\n        const visiblePages = getVisiblePages(0, pageCount);\n        setVisiblePages(visiblePages);\n    }, [pageCount, getVisiblePages]);\n\n    const [visiblePages, setVisiblePages] = useState(getVisiblePages(0, pageCount));\n    const activePage = pageIndex + 1;\n\n    return (\n        <div className=\"d-lg-flex align-items-center text-center pb-1\">\n            {sizePerPageList.length > 0 && (\n                <div className=\"d-inline-block me-3\">\n                    <label className=\"me-1\">Display :</label>\n                    <select\n                        value={tableProps.state.pageSize}\n                        onChange={(e) => {\n                            tableProps.setPageSize(Number(e.target.value));\n                        }}\n                        className=\"form-select d-inline-block w-auto\">\n                        {(sizePerPageList || []).map((pageSize, index) => {\n                            return (\n                                <option key={index} value={pageSize.value}>\n                                    {pageSize.text}\n                                </option>\n                            );\n                        })}\n                    </select>\n                </div>\n            )}\n\n            <span className=\"me-3\">\n                Page{' '}\n                <strong>\n                    {pageIndex + 1} of {tableProps.pageOptions.length}\n                </strong>{' '}\n            </span>\n\n            <span className=\"d-inline-block align-items-center text-sm-start text-center my-sm-0 my-2\">\n                <label>Go to page : </label>\n                <input\n                    type=\"number\"\n                    value={pageIndex + 1}\n                    min=\"1\"\n                    onChange={(e: any) => {\n                        const page = e.target.value ? Number(e.target.value) - 1 : 0;\n                        tableProps.gotoPage(page);\n                        setPageIndex(tableProps.state.pageIndex);\n                    }}\n                    className=\"form-control w-25 ms-1 d-inline-block\"\n                />\n            </span>\n\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0\">\n                <li\n                    key=\"prevpage\"\n                    className={classNames('page-item', 'paginate_button', 'previous', {\n                        disabled: activePage === 1,\n                    })}\n                    onClick={() => {\n                        if (activePage === 1) return;\n                        changePage(activePage - 1);\n                    }}>\n                    <Link to=\"#\" className=\"page-link\">\n                        <i className=\"mdi mdi-chevron-left\"></i>\n                    </Link>\n                </li>\n                {(visiblePages || []).map((page, index, array) => {\n                    return array[index - 1] + 1 < page ? (\n                        <React.Fragment key={page}>\n                            <li className=\"page-item disabled d-none d-xl-inline-block\">\n                                <Link to=\"#\" className=\"page-link\">\n                                    ...\n                                </Link>\n                            </li>\n                            <li\n                                className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\n                                    active: activePage === page,\n                                })}\n                                onClick={(e) => changePage(page)}>\n                                <Link to=\"#\" className=\"page-link\">\n                                    {page}\n                                </Link>\n                            </li>\n                        </React.Fragment>\n                    ) : (\n                        <li\n                            key={page}\n                            className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\n                                active: activePage === page,\n                            })}\n                            onClick={(e) => changePage(page)}>\n                            <Link to=\"#\" className=\"page-link\">\n                                {page}\n                            </Link>\n                        </li>\n                    );\n                })}\n                <li\n                    key=\"nextpage\"\n                    className={classNames('page-item', 'paginate_button', 'next', {\n                        disabled: activePage === tableProps.pageCount,\n                    })}\n                    onClick={() => {\n                        if (activePage === tableProps.pageCount) return;\n                        changePage(activePage + 1);\n                    }}>\n                    <Link to=\"#\" className=\"page-link\">\n                        <i className=\"mdi mdi-chevron-right\"></i>\n                    </Link>\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default Pagination;\n","// @flow\nimport React, { useRef, useEffect, forwardRef } from 'react';\nimport {\n    useTable,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    useGlobalFilter,\n    useAsyncDebounce,\n    useExpanded,\n} from 'react-table';\nimport classNames from 'classnames';\n\n// components\nimport Pagination from './Pagination';\n\n// Define a default UI for filtering\nconst GlobalFilter = ({ preGlobalFilteredRows, globalFilter, setGlobalFilter, searchBoxClass }) => {\n    const count = preGlobalFilteredRows.length;\n    const [value, setValue] = React.useState(globalFilter);\n    const onChange = useAsyncDebounce((value) => {\n        setGlobalFilter(value || undefined);\n    }, 200);\n\n    return (\n        <div className={classNames(searchBoxClass)}>\n            <span className=\"d-flex align-items-center\">\n                Search :{' '}\n                <input\n                    value={value || ''}\n                    onChange={(e) => {\n                        setValue(e.target.value);\n                        onChange(e.target.value);\n                    }}\n                    placeholder={`${count} records...`}\n                    className=\"form-control w-auto ms-1\"\n                />\n            </span>\n        </div>\n    );\n};\n\nconst IndeterminateCheckbox = forwardRef(({ indeterminate, ...rest }, ref) => {\n    const defaultRef = useRef();\n    const resolvedRef: any = ref || defaultRef;\n\n    useEffect(() => {\n        resolvedRef.current.indeterminate = indeterminate;\n    }, [resolvedRef, indeterminate]);\n\n    return (\n        <>\n            <div className=\"form-check\">\n                <input type=\"checkbox\" className=\"form-check-input\" ref={resolvedRef} {...rest} />\n                <label htmlFor=\"form-check-input\" className=\"form-check-label\"></label>\n            </div>\n        </>\n    );\n});\n\ntype TableProps = {\n    isSearchable?: boolean,\n    isSortable?: boolean,\n    pagination?: boolean,\n    isSelectable?: boolean,\n    isExpandable?: boolean,\n    pageSize: number,\n    columns: Array<any>,\n    data: Array<any>,\n    searchBoxClass?: string,\n    tableClass?: string,\n    theadClass?: string,\n    sizePerPageList: {\n        text: string,\n        value: number,\n    }[],\n};\n\nconst Table = (props: TableProps): React$Element<React$FragmentType> => {\n    const isSearchable = props['isSearchable'] || false;\n    const isSortable = props['isSortable'] || false;\n    const pagination = props['pagination'] || false;\n    const isSelectable = props['isSelectable'] || false;\n    const isExpandable = props['isExpandable'] || false;\n\n    const dataTable = useTable(\n        {\n            columns: props['columns'],\n            data: props['data'],\n            initialState: { pageSize: props['pageSize'] || 10 },\n        },\n        isSearchable && useGlobalFilter,\n        isSortable && useSortBy,\n        isExpandable && useExpanded,\n        pagination && usePagination,\n        isSelectable && useRowSelect,\n        (hooks) => {\n            isSelectable &&\n                hooks.visibleColumns.push((columns) => [\n                    // Let's make a column for selection\n                    {\n                        id: 'selection',\n                        // The header can use the table's getToggleAllRowsSelectedProps method\n                        // to render a checkbox\n                        Header: ({ getToggleAllPageRowsSelectedProps }) => (\n                            <div>\n                                <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} />\n                            </div>\n                        ),\n                        // The cell can use the individual row's getToggleRowSelectedProps method\n                        // to the render a checkbox\n                        Cell: ({ row }) => (\n                            <div>\n                                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n                            </div>\n                        ),\n                    },\n                    ...columns,\n                ]);\n\n            isExpandable &&\n                hooks.visibleColumns.push((columns) => [\n                    // Let's make a column for selection\n                    {\n                        // Build our expander column\n                        id: 'expander', // Make sure it has an ID\n                        Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\n                            <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? '-' : '+'}</span>\n                        ),\n                        Cell: ({ row }) =>\n                            // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n                            // to build the toggle for expanding a row\n                            row.canExpand ? (\n                                <span\n                                    {...row.getToggleRowExpandedProps({\n                                        style: {\n                                            // We can even use the row.depth property\n                                            // and paddingLeft to indicate the depth\n                                            // of the row\n                                            paddingLeft: `${row.depth * 2}rem`,\n                                        },\n                                    })}>\n                                    {row.isExpanded ? '-' : '+'}\n                                </span>\n                            ) : null,\n                    },\n                    ...columns,\n                ]);\n        }\n    );\n\n    let rows = pagination ? dataTable.page : dataTable.rows;\n\n    return (\n        <>\n            {isSearchable && (\n                <GlobalFilter\n                    preGlobalFilteredRows={dataTable.preGlobalFilteredRows}\n                    globalFilter={dataTable.state.globalFilter}\n                    setGlobalFilter={dataTable.setGlobalFilter}\n                    searchBoxClass={props['searchBoxClass']}\n                />\n            )}\n\n            <div className=\"table-responsive\">\n                <table\n                    {...dataTable.getTableProps()}\n                    className={classNames('table table-centered react-table', props['tableClass'])}>\n                    <thead className={props['theadClass']}>\n                        {dataTable.headerGroups.map((headerGroup) => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map((column) => (\n                                    <th\n                                        {...column.getHeaderProps(column.sort && column.getSortByToggleProps())}\n                                        className={classNames({\n                                            sorting_desc: column.isSortedDesc === true,\n                                            sorting_asc: column.isSortedDesc === false,\n                                            sortable: column.sort === true,\n                                        })}>\n                                        {column.render('Header')}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody {...dataTable.getTableBodyProps()}>\n                        {(rows || []).map((row, i) => {\n                            dataTable.prepareRow(row);\n                            return (\n                                <tr {...row.getRowProps()}>\n                                    {row.cells.map((cell) => {\n                                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n                                    })}\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n\n            {pagination && <Pagination tableProps={dataTable} sizePerPageList={props['sizePerPageList']} />}\n        </>\n    );\n};\n\nexport default Table;\n","// @flow\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n// components\nimport PageTitle from '../../../components/PageTitle';\nimport Table from '../../../components/Table';\n\n\nimport { APICore } from '../../../helpers/api/apiCore';\nconst api = new APICore();\n\n/* name column render */\nconst NameColumn = ({ row }) => {\n    return (\n        <div className=\"table-user\">\n            <img src={row.original.avatar} alt=\"\" className=\"me-2 rounded-circle\" />\n            <Link to=\"/\" className=\"text-body fw-semibold\">\n                {row.original.name}\n            </Link>\n        </div>\n    );\n};\n\n/* status column render */\nconst StatusColumn = ({ row }) => {\n    return (\n        <>\n            <span\n                className={classNames('badge', {\n                    'badge-success-lighten': row.original.status === 'Active',\n                    'badge-secondary-lighten': row.original.status === 'Offline',\n                })}>\n                {row.original.status}\n            </span>\n        </>\n    );\n};\n\n/* action column render */\nconst ActionColumn = ({ row }) => {\n    return (\n        <>\n            <Link to=\"/\" className=\"action-icon\">\n                {' '}\n                <i className=\"mdi mdi-eye\"></i>\n            </Link>\n            <Link to=\"/\" className=\"action-icon\">\n                {' '}\n                <i className=\"mdi mdi-square-edit-outline\"></i>\n            </Link>\n            <Link to=\"/\" className=\"action-icon\">\n                {' '}\n                <i className=\"mdi mdi-delete\"></i>\n            </Link>\n        </>\n    );\n};\n\nconst columns = [\n    {\n        Header: 'Name',\n        accessor: 'name',\n        sort: true,\n        Cell: NameColumn,\n        classes: 'table-user',\n    },\n    {\n        Header: 'Phone',\n        accessor: 'phone',\n        sort: true,\n    },\n    {\n        Header: 'Email',\n        accessor: 'email',\n        sort: true,\n    },\n    {\n        Header: 'Location',\n        accessor: 'location',\n        sort: true,\n    },\n    {\n        Header: 'Role',\n        accessor: 'role',\n        sort: false,\n    },\n    {\n        Header: 'Created On',\n        accessor: 'created_on',\n        sort: true,\n    },\n    {\n        Header: 'Status',\n        accessor: 'status',\n        sort: true,\n        Cell: StatusColumn,\n    },\n    {\n        Header: 'Action',\n        accessor: 'action',\n        sort: false,\n        classes: 'table-action',\n        Cell: ActionColumn,\n    },\n];\n\nconst sizePerPageList = [\n    {\n        text: '10',\n        value: 10,\n    },\n    {\n        text: '25',\n        value: 25,\n    },\n    {\n        text: '50',\n        value: 50,\n    },\n];\n\n// main component\nconst Team = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                title={'Team'}\n            />\n\n            <Row>\n                <Col xs={12}>\n                    <Card>\n                        <Card.Body>\n                            <Row className='mb-2'>\n                                <Col xl={12}>\n                                    <div className=\"text-lg-end mt-xl-0 mt-2\">\n                                        <Button variant=\"danger\" className=\"mb-2 me-2\">\n                                            <i className=\"mdi mdi-basket me-1\"></i> Add\n                                        </Button>\n                                        <Button variant=\"light\" className=\"mb-2\">\n                                            Export\n                                        </Button>\n                                    </div>\n                                </Col>\n                            </Row>\n\n                            <Table\n                                columns={columns}\n                                data={api.getTeamMembers()}\n                                pageSize={10}\n                                sizePerPageList={sizePerPageList}\n                                isSortable={true}\n                                pagination={true}\n                                isSelectable={true}\n                                isSearchable={true}\n                                tableClass=\"table-striped\"\n                                searchBoxClass=\"mt-2 mb-3\"\n                            />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Team;\n"],"sourceRoot":""}