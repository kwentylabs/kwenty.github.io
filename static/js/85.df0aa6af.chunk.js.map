{"version":3,"sources":["pages/tables/Basic.js","components/PageTitle.js","../node_modules/react-bootstrap/esm/divWithClassName.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-bootstrap/esm/Row.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/Table.js"],"names":["records","id","firstName","lastName","username","BasicTable","Body","className","map","record","index","scope","InverseTable","variant","StripedRowsTable","striped","TableHeadOption","BorderedTable","bordered","to","BorderedColorTable","HoverableTable","hover","SmallTable","size","ResponsiveTable","responsive","Tables","breadCrumbItems","label","path","active","title","xl","xs","PageTitle","props","React","p","ref","_jsx","classNames","context","displayName","Row","bsPrefix","as","Component","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","CardImg","prefix","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","Provider","value","children","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","Card","bg","text","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Link","Text","Header","Footer","ImgOverlay","Table","borderless","table","responsiveClass"],"mappings":"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","file":"static/js/85.df0aa6af.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Card, Table } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\n// dummy records\nconst records = [\n    { id: 1, firstName: 'Mark', lastName: 'Otto', username: '@mdo' },\n    { id: 2, firstName: 'Jacob', lastName: 'Thornton', username: '@fat' },\n    { id: 3, firstName: 'Dave', lastName: 'G', username: '@dave' },\n    { id: 4, firstName: 'Nik', lastName: 'N', username: '@nikn' },\n    { id: 5, firstName: 'Shreyu', lastName: 'Navadiya', username: '@sn' },\n];\n\nconst BasicTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Basic example</h4>\n                <p className=\"text-muted font-14\">\n                    Just use <code>Table</code> element\n                </p>\n\n                <Table className=\"mb-0\">\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InverseTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Inverse Table</h4>\n                <p className=\"text-muted font-14\">\n                    You can also invert the colors—with light text on dark backgrounds—by specifying <code>dark</code>{' '}\n                    attribute\n                </p>\n\n                <Table className=\"mb-0\" variant=\"dark\">\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst StripedRowsTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Striped Rows</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>striped</code> attribute to table\n                </p>\n\n                <Table className=\"mb-0\" striped>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst TableHeadOption = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Table head options</h4>\n                <p className=\"text-muted font-14\">\n                    Use one of two modifier classes to make <code>&lt;thead&gt;</code>s appear light or dark gray.\n                </p>\n\n                <Table className=\"table-centered mb-0\">\n                    <thead className=\"table-dark\">\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst BorderedTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Bordered table</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>bordered</code> attribute for borders on all sides of the table and cells.\n                </p>\n\n                <Table className=\"mb-0\" bordered>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                            <th className=\"text-center\">Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                    <td className=\"table-action text-center\">\n                                        <Link to=\"#\" className=\"action-icon\">\n                                            <i className=\"mdi mdi-delete\"></i>\n                                        </Link>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst BorderedColorTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Bordered table</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>.table-bordered</code> & <code>.border-primary</code> can be added to change colors.\n                </p>\n\n                <Table className=\"mb-0 border-primary table-centered\" bordered>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                            <th className=\"text-center\">Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                    <td className=\"table-action text-center\">\n                                        <Link to=\"#\" className=\"action-icon\">\n                                            <i className=\"mdi mdi-delete\"></i>\n                                        </Link>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HoverableTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Hoverable Rows</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>hover</code> attribute to enable a hover state on table rows\n                </p>\n\n                <Table className=\"mb-0\" hover>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst SmallTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Small table</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>size=\"sm\"</code> attribute to make tables more compact by cutting cell padding in half\n                </p>\n\n                <Table className=\"mb-0\" size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ResponsiveTable = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Always responsive</h4>\n                <p className=\"text-muted font-14\">\n                    Across every breakpoint, use <code>responsive</code> attribute to create responsive tables\n                </p>\n\n                <Table className=\"mb-0\" responsive>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Username</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {records.map((record, index) => {\n                            return (\n                                <tr key={index}>\n                                    <th scope=\"row\">{record.id}</th>\n                                    <td>{record.firstName}</td>\n                                    <td>{record.lastName}</td>\n                                    <td>{record.username}</td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Tables = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Tables', path: '/ui/tables/basic' },\n                    { label: 'Basic Tables', path: '/ui/tables/basic', active: true },\n                ]}\n                title={'Basic Tables'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <BasicTable />\n                </Col>\n\n                <Col xl={6}>\n                    <InverseTable />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <StripedRowsTable />\n                </Col>\n\n                <Col xl={6}>\n                    <TableHeadOption />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <HoverableTable />\n                </Col>\n\n                <Col xl={6}>\n                    <SmallTable />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <BorderedTable />\n                </Col>\n\n                <Col xl={6}>\n                    <BorderedColorTable />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xs={12}>\n                    <ResponsiveTable />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Tables;\n","// @flow\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\ntype PageTitleProps = {\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;"],"sourceRoot":""}