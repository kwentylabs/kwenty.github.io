{"version":3,"sources":["components/PageTitle.js","../node_modules/react-bootstrap/esm/divWithClassName.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/@restart/hooks/esm/useEventCallback.js","../node_modules/@restart/hooks/esm/useCommittedRef.js","../node_modules/react-bootstrap/esm/Row.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/@restart/hooks/esm/useMounted.js","../node_modules/dom-helpers/esm/ownerDocument.js","../node_modules/dom-helpers/esm/addEventListener.js","components/VerticalForm.js","components/FormInput.js","../node_modules/dom-helpers/esm/listen.js","../node_modules/dom-helpers/esm/removeEventListener.js","../node_modules/react-bootstrap/esm/types.js","../node_modules/react-bootstrap/esm/DropdownButton.js","pages/forms/Basic.js"],"names":["PageTitle","props","className","title","React","p","ref","_jsx","classNames","context","displayName","useEventCallback","fn","useCommittedRef","useCallback","current","apply","arguments","value","useRef","useEffect","Row","bsPrefix","as","Component","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","_excluded","useButtonProps","tagName","disabled","href","target","rel","onClick","tabIndex","type","meta","handleClick","event","trim","isTrivialHref","preventDefault","stopPropagation","undefined","role","onKeyDown","key","Button","_ref","asProp","source","excluded","i","sourceKeys","Object","keys","length","indexOf","_objectWithoutPropertiesLoose","assign","buttonProps","toFnRef","useMergedRefs","refA","refB","useMemo","a","b","mergeRefs","window","document","createElement","CardImg","variant","prefix","CardHeader","contextValue","cardHeaderBsPrefix","CardHeaderContext","Provider","children","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","Card","bg","text","border","body","defaultProps","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","useMounted","mounted","isMounted","ownerDocument","node","optionsSupported","onceSupported","options","passive","once","canUseDOM","addEventListener","removeEventListener","e","eventName","handler","capture","wrappedHandler","__once","onceHandler","this","call","VerticalForm","defaultValues","resolver","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","map","child","name","PasswordInput","placeholder","refCallback","useState","showPassword","setShowPassword","InputGroup","Form","Control","id","r","isInvalid","autoComplete","FormInput","label","labelClassName","containerClass","otherProps","comp","Group","Label","Feedback","Select","Check","listen","alignDirection","PropTypes","oneOf","alignPropType","oneOfType","shape","sm","md","lg","xl","xxl","object","propTypes","string","func","isRequired","bool","align","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","size","DropdownButton","_jsxs","Dropdown","DropdownToggle","childBsPrefix","DropdownMenu","renderOnMount","BasicInputElements","password","statictext","color","rows","readOnly","plaintext","htmlFor","multiple","Range","FloatingLabels","controlId","style","height","SelectInput","Switches","CustomCheckboxes","InlineCustomCheckboxes","CustomRadios","InputSizes","InputGroups","Item","Divider","DefaultForm","defaultValue","HorizontalForm","column","span","offset","InlineForm","xs","visuallyHidden","HorizontalFormLabelSizing","FormGrid","Col","BasicForms","breadCrumbItems","path","active"],"mappings":"mHACA,iCAsBeA,IAZG,SAACC,GACf,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,qBAAKC,UAAU,iBAAf,SACI,oBAAIA,UAAU,aAAd,SAA4BD,EAAME,gB,2ECbtC,aAAAD,GAAS,OAAiBE,cAAiB,SAACC,EAAGC,GAAJ,OAAyBC,cAAK,MAAD,YAAC,eAAYF,GAAb,IACtFC,IAAKA,EACLJ,UAAWM,IAAWH,EAAEH,UAAWA,W,iCCLrC,WACMO,EAAuBL,gBAAoB,MACjDK,EAAQC,YAAc,oBACPD,O,iCCHf,sDAEe,SAASE,EAAiBC,GACvC,IAAIN,EAAMO,YAAgBD,GAC1B,OAAOE,uBAAY,WACjB,OAAOR,EAAIS,SAAWT,EAAIS,QAAQC,MAAMV,EAAKW,aAC5C,CAACX,M,iCCNN,WAmBeO,IARf,SAAyBK,GACvB,IAAIZ,EAAMa,iBAAOD,GAIjB,OAHAE,qBAAU,WACRd,EAAIS,QAAUG,IACb,CAACA,IACGZ,I,2HCZHe,EAAmBjB,cAAiB,WAMvCE,GAAQ,IALTgB,EAKS,EALTA,SACApB,EAIS,EAJTA,UAIS,IAFTqB,GAAIC,OAEK,MAFO,MAEP,EADNvB,EACM,iBACHwB,EAAoBC,YAAmBJ,EAAU,OACjDK,EAAcC,cACdC,EAAa,GAAH,OAAMJ,EAAN,SACVK,EAAU,GAiBhB,OAhBAH,EAAYI,SAAQ,SAAAC,GAClB,IAEIC,EAFEC,EAAYjC,EAAM+B,UACjB/B,EAAM+B,GAKTC,EAFa,MAAbC,GAA0C,kBAAdA,EAG1BA,EADFD,KAGKC,EAGT,IAAMC,EAAqB,OAAbH,EAAA,WAAwBA,GAAa,GACvC,MAARC,GAAcH,EAAQM,KAAR,UAAgBP,GAAhB,OAA6BM,EAA7B,YAAsCF,OAEtC1B,cAAKiB,EAAD,YAAC,aACvBlB,IAAKA,GACFL,GAFmB,IAGtBC,UAAWM,IAAU,WAAV,GAAWN,EAAWuB,GAAtB,OAA4CK,UAG3DT,EAAIX,YAAc,MACHW,O,6FCtCTgB,EAAY,CAAC,KAAM,YASlB,SAASC,EAAT,GASJ,IARDC,EAQC,EARDA,QACAC,EAOC,EAPDA,SACAC,EAMC,EANDA,KACAC,EAKC,EALDA,OACAC,EAIC,EAJDA,IACAC,EAGC,EAHDA,QAGC,IAFDC,gBAEC,MAFU,EAEV,EADDC,EACC,EADDA,KAEKP,IAEDA,EADU,MAARE,GAA0B,MAAVC,GAAyB,MAAPC,EAC1B,IAEA,UAId,IAAMI,EAAO,CACXR,WAGF,GAAgB,WAAZA,EACF,MAAO,CAAC,CACNO,KAAMA,GAAQ,SACdN,YACCO,GAGL,IAAMC,EAAc,SAAAC,IACdT,GAAwB,MAAZD,GAjCb,SAAuBE,GAC5B,OAAQA,GAAwB,MAAhBA,EAAKS,OAgCgBC,CAAcV,KAC/CQ,EAAMG,iBAGJZ,EACFS,EAAMI,kBAIG,MAAXT,GAA2BA,EAAQK,IAmBrC,MATgB,MAAZV,IAEFE,IAASA,EAAO,KAEZD,IACFC,OAAOa,IAIJ,CAAC,CACNC,KAAM,SAGNf,cAAUc,EACVT,SAAUL,OAAWc,EAAYT,EACjCJ,OACAC,OAAoB,MAAZH,EAAkBG,OAASY,EACnC,gBAAkBd,QAAWc,EAC7BX,IAAiB,MAAZJ,EAAkBI,OAAMW,EAC7BV,QAASI,EACTQ,UA3BoB,SAAAP,GACF,MAAdA,EAAMQ,MACRR,EAAMG,iBACNJ,EAAYC,MAyBbF,GAEL,IAAMW,EAAsBtD,cAAiB,SAACuD,EAAMrD,GAClD,IACMsD,EAEFD,EAFFpC,GACAiB,EACEmB,EADFnB,SAEEvC,EApFN,SAAuC4D,EAAQC,GAAY,GAAc,MAAVD,EAAgB,MAAO,GAAI,IAA2DJ,EAAKM,EAA5DrB,EAAS,GAAQsB,EAAaC,OAAOC,KAAKL,GAAqB,IAAKE,EAAI,EAAGA,EAAIC,EAAWG,OAAQJ,IAAON,EAAMO,EAAWD,GAAQD,EAASM,QAAQX,IAAQ,IAAaf,EAAOe,GAAOI,EAAOJ,IAAQ,OAAOf,EAoF5R2B,CAA8BV,EAAMtB,GAEhD,EAEKC,EAAe2B,OAAOK,OAAO,CAChC/B,QAASqB,EACTpB,YACCvC,IALH,mBAAOsE,EAAP,KACW/C,EADX,KACEe,QAKF,OAAoBhC,cAAKiB,EAAWyC,OAAOK,OAAO,GAAIrE,EAAOsE,EAAa,CACxEjE,IAAKA,QAGToD,EAAOhD,YAAc,SACNgD,O,iCCnGf,WAEIc,EAAU,SAAiBlE,GAC7B,OAAQA,GAAsB,oBAARA,EAA2B,SAAUY,GACzDZ,EAAIS,QAAUG,GAD2BZ,GAoC9BmE,IANf,SAAuBC,EAAMC,GAC3B,OAAOC,mBAAQ,WACb,OA3BG,SAAmBF,EAAMC,GAC9B,IAAIE,EAAIL,EAAQE,GACZI,EAAIN,EAAQG,GAChB,OAAO,SAAUzD,GACX2D,GAAGA,EAAE3D,GACL4D,GAAGA,EAAE5D,IAsBF6D,CAAUL,EAAMC,KACtB,CAACD,EAAMC,M,iCCpCG,MAAqB,qBAAXK,SAA0BA,OAAOC,WAAYD,OAAOC,SAASC,gB,sJCIhFC,EAAuB/E,cAC7B,WAMGE,GAAQ,IALTgB,EAKS,EALTA,SACApB,EAIS,EAJTA,UACAkF,EAGS,EAHTA,QAGS,IAFT7D,GAAIC,OAEK,MAFO,MAEP,EADNvB,EACM,iBACHoF,EAAS3D,YAAmBJ,EAAU,YAC5C,OAAoBf,cAAKiB,EAAD,aACtBlB,IAAKA,EACLJ,UAAWM,IAAW4E,EAAU,GAAH,OAAMC,EAAN,YAAgBD,GAAYC,EAAQnF,IAC9DD,OAGPkF,EAAQzE,YAAc,UACPyE,Q,yCCdTG,EAA0BlF,cAAiB,WAM9CE,GAAQ,IALTgB,EAKS,EALTA,SACApB,EAIS,EAJTA,UAIS,IAFTqB,GAAIC,OAEK,MAFO,MAEP,EADNvB,EACM,iBACHoF,EAAS3D,YAAmBJ,EAAU,eACtCiE,EAAeX,mBAAQ,iBAAO,CAClCY,mBAAoBH,KAClB,CAACA,IACL,OAAoB9E,cAAKkF,IAAkBC,SAAU,CACnDxE,MAAOqE,EACPI,SAAuBpF,cAAKiB,EAAD,YAAC,aAC1BlB,IAAKA,GACFL,GAFsB,IAGzBC,UAAWM,IAAWN,EAAWmF,WAIvCC,EAAW5E,YAAc,aACV4E,Q,uECnBTM,EAAgBC,YAAiB,MACjCC,EAAgBD,YAAiB,MACjCE,EAAWC,YAAmB,aAC9BC,EAAYD,YAAmB,aAAc,CACjDxE,UAAWoE,IAEPM,EAAeF,YAAmB,gBAAiB,CACvDxE,UAAWsE,IAEPK,EAAWH,YAAmB,YAAa,CAC/CxE,UAAW,MAEP4E,EAAWJ,YAAmB,YAAa,CAC/CxE,UAAW,MAEP6E,EAAaL,YAAmB,eAChCM,EAAiBN,YAAmB,oBAIpCO,EAAoBnG,cAAiB,WAWxCE,GAAQ,IAVTgB,EAUS,EAVTA,SACApB,EASS,EATTA,UACAsG,EAQS,EARTA,GACAC,EAOS,EAPTA,KACAC,EAMS,EANTA,OACAC,EAKS,EALTA,KACAhB,EAIS,EAJTA,SAIS,IAFTpE,GAAIC,OAEK,MAFO,MAEP,EADNvB,EACM,iBACHoF,EAAS3D,YAAmBJ,EAAU,QAC5C,OAAoBf,cAAKiB,EAAD,YAAC,aACvBlB,IAAKA,GACFL,GAFmB,IAGtBC,UAAWM,IAAWN,EAAWmF,EAAQmB,GAAM,MAAJ,OAAUA,GAAMC,GAAQ,QAAJ,OAAYA,GAAQC,GAAU,UAAJ,OAAcA,IACvGf,SAAUgB,EAAoBpG,cAAKwF,EAAU,CAC3CJ,SAAUA,IACPA,QAGTY,EAAK7F,YAAc,OACnB6F,EAAKK,aA1BgB,CACnBD,MAAM,GA0BO1C,WAAOK,OAAOiC,EAAM,CACjCM,IAAK1B,EACL2B,MAAOb,EACPc,SAAUb,EACVc,KAAMjB,EACNkB,KAAMd,EACNe,KAAMd,EACNe,OAAQ7B,EACR8B,OAAQf,EACRgB,WAAYf,K,iCC7Dd,6CAsBe,SAASgB,IACtB,IAAIC,EAAUpG,kBAAO,GACjBqG,EAAYrG,kBAAO,WACrB,OAAOoG,EAAQxG,WAOjB,OALAK,qBAAU,WACR,OAAO,WACLmG,EAAQxG,SAAU,KAEnB,IACIyG,EAAUzG,U,iCC3BJ,SAAS0G,EAAcC,GACpC,OAAOA,GAAQA,EAAKD,eAAiBxC,SANvC,mC,iCCAA,aAEW0C,GAAmB,EACnBC,GAAgB,EAE3B,IACE,IAAIC,EAAU,CACRC,cACF,OAAOH,GAAmB,GAGxBI,WAEF,OAAOH,EAAgBD,GAAmB,IAK1CK,MACFhD,OAAOiD,iBAAiB,OAAQJ,EAASA,GACzC7C,OAAOkD,oBAAoB,OAAQL,GAAS,IAE9C,MAAOM,IAiCMF,IArBf,SAA0BP,EAAMU,EAAWC,EAASR,GAClD,GAAIA,GAA8B,mBAAZA,IAA0BD,EAAe,CAC7D,IAAIG,EAAOF,EAAQE,KACfO,EAAUT,EAAQS,QAClBC,EAAiBF,GAEhBT,GAAiBG,IACpBQ,EAAiBF,EAAQG,QAAU,SAASC,EAAYxF,GACtDyF,KAAKR,oBAAoBE,EAAWK,EAAaH,GACjDD,EAAQM,KAAKD,KAAMzF,IAGrBoF,EAAQG,OAASD,GAGnBb,EAAKO,iBAAiBG,EAAWG,EAAgBZ,EAAmBE,EAAUS,GAGhFZ,EAAKO,iBAAiBG,EAAWC,EAASR,K,gJCD7Be,EAvCM,SAAC,GAMwB,IAL1CC,EAKyC,EALzCA,cACAC,EAIyC,EAJzCA,SACAnD,EAGyC,EAHzCA,SACAoD,EAEyC,EAFzCA,SACAC,EACyC,EADzCA,UAKMC,EAAUC,YAAQ,CAAEL,gBAAeC,aAErCK,EAIAF,EAJAE,aACAC,EAGAH,EAHAG,SACAC,EAEAJ,EAFAI,QACaC,EACbL,EADAM,UAAaD,OAGjB,OACI,sBAAMP,SAAUI,EAAaJ,GAAW7I,UAAW8I,EAAWQ,YAAU,EAAxE,SACKC,MAAMC,QAAQ/D,GACTA,EAASgE,KAAI,SAACC,GACV,OAAOA,EAAM3J,OAAS2J,EAAM3J,MAAM4J,KAC5BzJ,IAAM8E,cAAc0E,EAAM9G,KAA1B,0CAEW8G,EAAM3J,OAFjB,IAGQmJ,WACA3F,IAAKmG,EAAM3J,MAAM4J,KACjBP,SACAD,cAGRO,KAEVjE,K,sLCxCZmE,EAAgB,SAAC,GAAqE,IAAnED,EAAkE,EAAlEA,KAAME,EAA4D,EAA5DA,YAAaC,EAA+C,EAA/CA,YAAaV,EAAkC,EAAlCA,OAAQF,EAA0B,EAA1BA,SAAUlJ,EAAgB,EAAhBA,UACvE,EAAwC+J,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,OACI,mCACI,eAACC,EAAA,EAAD,CAAYlK,UAAU,OAAtB,UACI,cAACmK,EAAA,EAAKC,QAAN,yBACIxH,KAAMoH,EAAe,OAAS,WAC9BH,YAAaA,EACbF,KAAMA,EACNU,GAAIV,EACJtI,GAAG,QACHjB,IAAK,SAACkK,GACER,GAAaA,EAAYQ,IAEjCtK,UAAWA,EACXuK,aAAWnB,IAAUA,EAAOO,KACvBT,EAAWA,EAASS,GAAQ,IAXrC,IAYIa,aAAcb,KAElB,qBACI3J,UAAWM,IAAW,mBAAoB,uBAAwB,CAC9D,gBAAiB0J,IAErB,gBAAeA,EAAe,OAAS,QAJ3C,SAKI,sBACIhK,UAAU,eACV0C,QAAS,WACLuH,GAAiBD,cAoK9BS,EA9IG,SAAC,GAauC,IAZtDC,EAYqD,EAZrDA,MACA9H,EAWqD,EAXrDA,KACA+G,EAUqD,EAVrDA,KACAE,EASqD,EATrDA,YACAX,EAQqD,EARrDA,SACAE,EAOqD,EAPrDA,OACApJ,EAMqD,EANrDA,UACA2K,EAKqD,EALrDA,eACAC,EAIqD,EAJrDA,eACAd,EAGqD,EAHrDA,YACArE,EAEqD,EAFrDA,SACGoF,EACkD,iBAE/CC,EAAgB,aAATlI,EAAsB,WAAsB,WAATA,EAAoB,SAAW,QAE/E,OACI,mCACc,WAATA,EACG,+CAAOA,KAAMA,EAAM+G,KAAMA,GAAWT,EAAWA,EAASS,GAAQ,IAASkB,IAEzE,mCACc,aAATjI,EACG,mCACI,eAACuH,EAAA,EAAKY,MAAN,CAAY/K,UAAW4K,EAAvB,UACKF,EACG,qCACK,IACD,cAACP,EAAA,EAAKa,MAAN,CAAYhL,UAAW2K,EAAvB,SAAwCD,IAF5C,IAEiEjF,EAAU,OAE3E,KACJ,cAAC,EAAD,CACIkE,KAAMA,EACNE,YAAaA,EACbC,YAAaA,EACbV,OAAQA,EACRF,SAAUA,EACVlJ,UAAWA,IAGdoJ,GAAUA,EAAOO,GACd,cAACQ,EAAA,EAAKC,QAAQa,SAAd,CAAuBrI,KAAK,UAAU5C,UAAU,UAAhD,SACKoJ,EAAOO,GAAP,UAEL,UAIZ,mCACc,WAAT/G,EACG,mCACI,eAACuH,EAAA,EAAKY,MAAN,CAAY/K,UAAW4K,EAAvB,UACKF,EAAQ,cAACP,EAAA,EAAKa,MAAN,CAAYhL,UAAW2K,EAAvB,SAAwCD,IAAsB,KAEvE,cAACP,EAAA,EAAKe,OAAN,qCACItI,KAAMA,EACN8H,MAAOA,EACPf,KAAMA,EACNU,GAAIV,EACJvJ,IAAK,SAACkK,GACER,GAAaA,EAAYQ,IAEjCQ,KAAMA,EACN9K,UAAWA,EACXuK,aAAWnB,IAAUA,EAAOO,KACvBT,EAAWA,EAASS,GAAQ,IAC7BkB,GAZR,aAaKpF,KAGJ2D,GAAUA,EAAOO,GACd,cAACQ,EAAA,EAAKC,QAAQa,SAAd,CAAuBrI,KAAK,UAA5B,SACKwG,EAAOO,GAAP,UAEL,UAIZ,mCACc,aAAT/G,GAAgC,UAATA,EACpB,mCACI,eAACuH,EAAA,EAAKY,MAAN,CAAY/K,UAAW4K,EAAvB,UACI,cAACT,EAAA,EAAKgB,MAAN,yBACIvI,KAAMA,EACN8H,MAAOA,EACPf,KAAMA,EACNU,GAAIV,EACJvJ,IAAK,SAACkK,GACER,GAAaA,EAAYQ,IAEjCtK,UAAWA,EACXuK,aAAWnB,IAAUA,EAAOO,KACvBT,EAAWA,EAASS,GAAQ,IAC7BkB,IAGPzB,GAAUA,EAAOO,GACd,cAACQ,EAAA,EAAKC,QAAQa,SAAd,CAAuBrI,KAAK,UAA5B,SACKwG,EAAOO,GAAP,UAEL,UAIZ,eAACQ,EAAA,EAAKY,MAAN,CAAY/K,UAAW4K,EAAvB,UACKF,EAAQ,cAACP,EAAA,EAAKa,MAAN,CAAYhL,UAAW2K,EAAvB,SAAwCD,IAAsB,KAEvE,cAACP,EAAA,EAAKC,QAAN,qCACIxH,KAAMA,EACNiH,YAAaA,EACbF,KAAMA,EACNU,GAAIV,EACJtI,GAAIyJ,EACJ1K,IAAK,SAACkK,GACER,GAAaA,EAAYQ,IAEjCtK,UAAWA,EACXuK,aAAWnB,IAAUA,EAAOO,KACvBT,EAAWA,EAASS,GAAQ,IAC7BkB,GAZR,IAaIL,aAAcb,EAblB,SAcKlE,GAAsB,QAG1B2D,GAAUA,EAAOO,GACd,cAACQ,EAAA,EAAKC,QAAQa,SAAd,CAAuBrI,KAAK,UAA5B,SACKwG,EAAOO,GAAP,UAEL,kB,iCCzLhD,sBAUeyB,IAPf,SAAgB5D,EAAMU,EAAWC,EAASR,GAExC,OADAI,YAAiBP,EAAMU,EAAWC,EAASR,GACpC,WACLK,YAAoBR,EAAMU,EAAWC,EAASR,M,iCCWnCK,IATf,SAA6BR,EAAMU,EAAWC,EAASR,GACrD,IAAIS,EAAUT,GAA8B,mBAAZA,EAAwBA,EAAQS,QAAUT,EAC1EH,EAAKQ,oBAAoBE,EAAWC,EAASC,GAEzCD,EAAQG,QACVd,EAAKQ,oBAAoBE,EAAWC,EAAQG,OAAQF,K,iCCbxD,uDACMiD,EAAiBC,IAAUC,MAAM,CAAC,QAAS,QACpCC,EAAgBF,IAAUG,UAAU,CAACJ,EAAgBC,IAAUI,MAAM,CAChFC,GAAIN,IACFC,IAAUI,MAAM,CAClBE,GAAIP,IACFC,IAAUI,MAAM,CAClBG,GAAIR,IACFC,IAAUI,MAAM,CAClBI,GAAIT,IACFC,IAAUI,MAAM,CAClBK,IAAKV,IACHC,IAAUU,U,+PCJRC,EAAY,CAKhB5B,GAAIiB,IAAUY,OAGd3J,KAAM+I,IAAUY,OAGhBxJ,QAAS4I,IAAUa,KAGnBlM,MAAOqL,IAAU9D,KAAK4E,WAGtB9J,SAAUgJ,IAAUe,KASpBC,MAAOd,IAGPe,SAAUjB,IAAUY,OAGpBM,kBAAmBlB,IAAUe,KAO7BI,eAAgBnB,IAAUY,OAO1BQ,YAAapB,IAAUC,MAAM,CAAC,SAG9BnK,SAAUkK,IAAUY,OAGpBhH,QAASoG,IAAUY,OAGnBS,KAAMrB,IAAUY,QAYZU,EAA8B1M,cAAiB,WAclDE,GAdkD,IACnDH,EADmD,EACnDA,MACAwF,EAFmD,EAEnDA,SACArE,EAHmD,EAGnDA,SACAqL,EAJmD,EAInDA,eACAvH,EALmD,EAKnDA,QACAyH,EANmD,EAMnDA,KACAJ,EAPmD,EAOnDA,SACAC,EARmD,EAQnDA,kBACAlK,EATmD,EASnDA,SACAC,EAVmD,EAUnDA,KACA8H,EAXmD,EAWnDA,GACAqC,EAZmD,EAYnDA,YACG3M,EAbgD,wBAc7B8M,eAAMC,IAAD,YAAC,aAC5B1M,IAAKA,GACFL,GAFwB,IAG3B0F,SAAU,CAAcpF,cAAK0M,IAAgB,CAC3C1C,GAAIA,EACJ9H,KAAMA,EACNoK,KAAMA,EACNzH,QAASA,EACT5C,SAAUA,EACV0K,cAAe5L,EACfqE,SAAUxF,IACKI,cAAK4M,IAAc,CAClC5J,KAAMkJ,EACNW,cAAeV,EACfC,eAAgBA,EAChBvH,QAASwH,EACTjH,SAAUA,WAGdmH,EAAepM,YAAc,iBAC7BoM,EAAeX,UAAYA,EACZW,O,iCC7Gf,iIAQMO,EAAqB,WAIvB,IAAMpE,EAAUC,YAAQ,CACpBL,cAAe,CACXyE,SAAU,QACVC,WAAY,oBACZC,MAAO,aAIXrE,EAIAF,EAJAE,aACAC,EAGAH,EAHAG,SACAC,EAEAJ,EAFAI,QACaC,EACbL,EADAM,UAAaD,OAGjB,OACI,mCACI,cAAC,IAAD,UACI,eAAC,IAAKtC,KAAN,WACI,oBAAI9G,UAAU,eAAd,yBACA,oBAAGA,UAAU,aAAb,qGAC6F,IACzF,wCAFJ,KAEuB,4CAFvB,KAE8C,4CAF9C,KAEqE,kDAFrE,IAEkG,IAC9F,wCAHJ,KAGuB,yCAHvB,KAG2C,wCAH3C,KAG8D,wCAH9D,KAGiF,0CAHjF,KAIM,yCAJN,KAI0B,uCAJ1B,KAI4C,0CAJ5C,KAIiE,uCAJjE,QAIuF,IACnF,yCALJ,OAQA,eAAC,IAAD,WACI,cAAC,IAAD,CAAK6L,GAAI,EAAT,SACI,uBAAMhD,SAAUI,IAAhB,UACI,cAAC,IAAD,CACIyB,MAAM,OACN9H,KAAK,OACL+G,KAAK,OACLiB,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,QAKR,cAAC,IAAD,CACIuB,MAAM,QACN9H,KAAK,QACL+G,KAAK,QACLE,YAAY,QACZe,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,SAKR,cAAC,IAAD,CACIuB,MAAM,qBACN9H,KAAK,WACL+G,KAAK,WACLE,YAAY,uBACZe,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,YAKR,cAAC,IAAD,CACIuB,MAAM,cACN9H,KAAK,OACL+G,KAAK,cACLE,YAAY,cACZe,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,eAKR,cAAC,IAAD,CACIuB,MAAM,YACN9H,KAAK,WACL+G,KAAK,WACL4D,KAAK,IACL3C,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,YAKR,cAAC,IAAD,CACIuB,MAAM,YACN9H,KAAK,OACL+G,KAAK,QACLU,GAAG,QACHR,YAAY,iBACZ2D,UAAQ,EACR5C,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,SAKR,cAAC,IAAD,CACIuB,MAAM,WACN9H,KAAK,OACL+G,KAAK,QACLU,GAAG,QACHR,YAAY,iBACZvH,UAAQ,EACRsI,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,SAKR,cAAC,IAAD,CACIuB,MAAM,iBACN9H,KAAK,OACL+G,KAAK,aACLE,YAAY,WACZ4D,WAAS,EACTD,UAAQ,EACR5C,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,cAKR,eAAC,IAAK4B,MAAN,CAAY/K,UAAU,OAAtB,UACI,cAAC,IAAKgL,MAAN,CAAY0C,QAAQ,QAAQ1N,UAAU,aAAtC,0BAGA,cAAC,IAAKoK,QAAN,CAAcxH,KAAK,OAAO+G,KAAK,OAAOU,GAAG,QAAQR,YAAY,iBAC7D,cAAC,IAAK7C,KAAN,uGAOZ,cAAC,IAAD,CAAK6E,GAAI,EAAT,SACI,uBAAMhD,SAAUI,IAAhB,UACI,eAAC,IAAD,CACIU,KAAK,SACLe,MAAM,eACN9H,KAAK,SACLgI,eAAe,OACf5K,UAAU,cACVkJ,SAAUA,EAEVE,OAAQA,EACRD,QAASA,EATb,UAUI,uCACA,uCACA,uCACA,uCACA,yCAPI,UAUR,eAAC,IAAD,CACIQ,KAAK,cACLe,MAAM,kBACN9H,KAAK,SACL+K,UAAQ,EACR/C,eAAe,OACf5K,UAAU,cACVkJ,SAAUA,EAEVE,OAAQA,EACRD,QAASA,EAVb,UAWI,uCACA,uCACA,uCACA,uCACA,yCAPI,eAUR,cAAC,IAAD,CACIuB,MAAM,qBACN9H,KAAK,OACL+G,KAAK,OACLiB,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,QAKR,cAAC,IAAD,CACIuB,MAAM,OACN9H,KAAK,OACL+G,KAAK,OACLiB,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,QAKR,cAAC,IAAD,CACIuB,MAAM,QACN9H,KAAK,QACL+G,KAAK,QACLiB,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,SAKR,cAAC,IAAD,CACIuB,MAAM,OACN9H,KAAK,OACL+G,KAAK,OACLiB,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,QAKR,cAAC,IAAD,CACIuB,MAAM,OACN9H,KAAK,OACL+G,KAAK,OACLiB,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,QAKR,cAAC,IAAD,CACIuB,MAAM,SACN9H,KAAK,SACL+G,KAAK,SACLE,YAAY,qBACZe,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,UAKR,cAAC,IAAD,CACIuB,MAAM,QACN9H,KAAK,QACL+G,KAAK,QACLE,YAAY,oBACZ7J,UAAU,QACV4K,eAAgB,OAChB1B,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,SAKR,eAAC,IAAK4B,MAAN,CAAY/K,UAAU,OAAtB,UACI,cAAC,IAAKgL,MAAN,CAAY0C,QAAQ,eAAe1N,UAAU,aAA7C,mBAGA,cAAC,IAAK4N,MAAN,uBAW9BC,EAAiB,WACnB,OACI,mCACI,cAAC,IAAD,UACI,eAAC,IAAK/G,KAAN,WACI,oBAAI9G,UAAU,eAAd,6BACA,oBAAGA,UAAU,aAAb,oBACW,kDADX,eACwD,mDADxD,0EAEsE,+CAFtE,uBAGwB,kDAHxB,uDAIa,sDAJb,sBAOA,eAAC,IAAD,WACI,eAAC,IAAD,CAAK6L,GAAI,EAAT,UACI,oBAAI7L,UAAU,OAAd,qBACA,cAAC,IAAD,CAAe8N,UAAU,gBAAgBpD,MAAM,gBAAgB1K,UAAU,OAAzE,SACI,cAAC,IAAKoK,QAAN,CAAcxH,KAAK,QAAQiH,YAAY,uBAE3C,cAAC,IAAD,CAAeiE,UAAU,mBAAmBpD,MAAM,WAAlD,SACI,cAAC,IAAKN,QAAN,CAAcxH,KAAK,WAAWiH,YAAY,eAG9C,oBAAI7J,UAAU,YAAd,uBACA,cAAC,IAAD,CAAe8N,UAAU,oBAAoBpD,MAAM,WAAnD,SACI,cAAC,IAAKN,QAAN,CACI/I,GAAG,WACHwI,YAAY,uBACZkE,MAAO,CAAEC,OAAQ,gBAK7B,eAAC,IAAD,CAAKnC,GAAI,EAAT,UACI,oBAAI7L,UAAU,OAAd,qBACA,cAAC,IAAD,CAAe8N,UAAU,iBAAiBpD,MAAM,qBAAhD,SACI,eAAC,IAAKQ,OAAN,CAAa,aAAW,gCAAxB,UACI,2DACA,wBAAQlK,MAAM,IAAd,iBACA,wBAAQA,MAAM,IAAd,iBACA,wBAAQA,MAAM,IAAd,wBAIR,oBAAIhB,UAAU,YAAd,oBACA,eAAC,IAAD,CAAKA,UAAU,MAAf,UACI,cAAC,IAAD,CAAK4L,IAAE,EAAP,SACI,cAAC,IAAD,CAAekC,UAAU,oBAAoBpD,MAAM,gBAAnD,SACI,cAAC,IAAKN,QAAN,CAAcxH,KAAK,QAAQiH,YAAY,yBAG/C,cAAC,IAAD,CAAK+B,IAAE,EAAP,SACI,cAAC,IAAD,CAAekC,UAAU,qBAAqBpD,MAAM,qBAApD,SACI,eAAC,IAAKQ,OAAN,CAAa,aAAW,gCAAxB,UACI,2DACA,wBAAQlK,MAAM,IAAd,iBACA,wBAAQA,MAAM,IAAd,iBACA,wBAAQA,MAAM,IAAd,2CAatCiN,EAAc,WAChB,OACI,qCACI,oBAAIjO,UAAU,eAAd,yBACA,oBAAGA,UAAU,aAAb,oBACW,4CADX,oCACuE,kDADvE,oCAKA,cAAC,IAAK+K,MAAN,UACI,eAAC,IAAKG,OAAN,CAAalL,UAAU,qBAAqB,aAAW,yBAAvD,UACI,uCACA,uCACA,uCACA,uCACA,gDAOdkO,EAAW,WACb,OACI,qCACI,oBAAIlO,UAAU,oBAAd,sBACA,oBAAGA,UAAU,aAAb,uEAC8D,kDAD9D,+DAE6C,4CAF7C,iBAKA,eAAC,IAAD,WACI,cAAC,IAAKmL,MAAN,CAAYvI,KAAK,SAASyH,GAAG,gBAAgBK,MAAM,+BACnD,cAAC,IAAKS,MAAN,CACI7I,UAAQ,EACRM,KAAK,SACL8H,MAAM,0BACNL,GAAG,yBACHrK,UAAU,gBAOxBmO,EAAmB,WACrB,OACI,mCACI,eAAC,IAAKpD,MAAN,WACI,cAAC,IAAKC,MAAN,CAAYhL,UAAU,aAAa0N,QAAQ,kBAA3C,wBAGA,gCACI,cAAC,IAAKvC,MAAN,CAAYvI,KAAK,WAAWyH,GAAG,mBAAmBK,MAAM,+BACxD,cAAC,IAAKS,MAAN,CAAYvI,KAAK,WAAWyH,GAAG,mBAAmBK,MAAM,4BAA4BpI,UAAQ,aAO1G8L,EAAyB,WAC3B,OACI,eAAC,IAAKrD,MAAN,CAAY/K,UAAU,OAAtB,UACI,cAAC,IAAKgL,MAAN,CAAYhL,UAAU,mBAAmB0N,QAAQ,kBAAjD,oBAGA,gCACI,cAAC,IAAKvC,MAAN,CAAYvI,KAAK,WAAWyH,GAAG,kBAAkBK,MAAM,2BACvD,cAAC,IAAKS,MAAN,CAAYvI,KAAK,WAAWyH,GAAG,kBAAkBK,MAAM,2BAMjE2D,EAAe,WACjB,OACI,eAAC,IAAKtD,MAAN,CAAY/K,UAAU,OAAtB,UACI,cAAC,IAAKgL,MAAN,CAAYhL,UAAU,aAAa0N,QAAQ,kBAA3C,oBAGA,gCACI,cAAC,IAAKvC,MAAN,CAAYvI,KAAK,QAAQyH,GAAG,mBAAmBK,MAAM,+BACrD,cAAC,IAAKS,MAAN,CAAYvI,KAAK,QAAQyH,GAAG,mBAAmBK,MAAM,4BAA4BpI,UAAQ,WAMnGgM,EAAa,WACf,OACI,cAAC,IAAD,UACI,eAAC,IAAKxH,KAAN,WACI,oBAAI9G,UAAU,eAAd,yBACA,oBAAGA,UAAU,aAAb,yBACgB,iDADhB,QACqD,+CADrD,4DAKA,eAAC,IAAD,WACI,eAAC,IAAK+K,MAAN,CAAY/K,UAAU,OAAtB,UACI,cAAC,IAAKgL,MAAN,CAAY0C,QAAQ,QAApB,mBACA,cAAC,IAAKtD,QAAN,CAAcxH,KAAK,OAAO+G,KAAK,QAAQU,GAAG,QAAQR,YAAY,QAAQ8C,KAAK,UAG/E,eAAC,IAAK5B,MAAN,CAAY/K,UAAU,OAAtB,UACI,cAAC,IAAKgL,MAAN,CAAY0C,QAAQ,SAApB,oBACA,cAAC,IAAKtD,QAAN,CAAcxH,KAAK,OAAO+G,KAAK,SAASU,GAAG,SAASR,YAAY,cAGpE,eAAC,IAAKkB,MAAN,CAAY/K,UAAU,OAAtB,UACI,cAAC,IAAKgL,MAAN,CAAY0C,QAAQ,QAApB,mBACA,cAAC,IAAKtD,QAAN,CAAcxH,KAAK,OAAO+G,KAAK,QAAQU,GAAG,QAAQR,YAAY,QAAQ8C,KAAK,UAG/E,eAAC,IAAK5B,MAAN,CAAY/K,UAAU,OAAtB,UACI,cAAC,IAAKgL,MAAN,CAAY0C,QAAQ,OAApB,wBACA,cAAC,IAAD,UACI,cAAC,IAAD,CAAK/B,GAAI,EAAT,SACI,cAAC,IAAKvB,QAAN,CAAcxH,KAAK,OAAO+G,KAAK,OAAOU,GAAG,OAAOR,YAAY,8BAUtF0E,EAAc,WAChB,OACI,cAAC,IAAD,UACI,eAAC,IAAKzH,KAAN,WACI,oBAAI9G,UAAU,eAAd,yBACA,mBAAGA,UAAU,aAAb,2JAKA,eAAC,IAAD,WACI,eAAC,IAAK+K,MAAN,WACI,cAAC,IAAKC,MAAN,CAAY0C,QAAQ,SAApB,oBACA,eAAC,IAAD,CAAY1N,UAAU,OAAtB,UACI,cAAC,IAAWgH,KAAZ,CAAiBqD,GAAG,eAApB,eACA,cAAC,IAAKD,QAAN,CACIP,YAAY,WACZ,aAAW,WACX,mBAAiB,uBAK7B,eAAC,IAAKkB,MAAN,WACI,cAAC,IAAKC,MAAN,CAAY0C,QAAQ,WAApB,sBACA,eAAC,IAAD,CAAY1N,UAAU,OAAtB,UACI,eAAC,IAAD,CAAgBkF,QAAQ,UAAUjF,MAAM,WAAWoK,GAAG,yBAAtD,UACI,cAAC,IAASmE,KAAV,CAAejM,KAAK,IAApB,oBACA,cAAC,IAASiM,KAAV,CAAejM,KAAK,IAApB,4BACA,cAAC,IAASiM,KAAV,CAAejM,KAAK,IAApB,iCACA,cAAC,IAASkM,QAAV,IACA,cAAC,IAASD,KAAV,CAAejM,KAAK,IAApB,+BAEJ,cAAC,IAAK6H,QAAN,CAAc,aAAW,0CAIjC,eAAC,IAAKW,MAAN,WACI,cAAC,IAAKC,MAAN,CAAY0C,QAAQ,SAApB,oBACA,eAAC,IAAD,CAAY1N,UAAU,OAAtB,UACI,cAAC,IAAKoK,QAAN,CACIP,YAAY,uBACZ,aAAW,uBACX,mBAAiB,iBAErB,cAAC,IAAD,CAAQ3E,QAAQ,OAAOmF,GAAG,gBAA1B,0BAMR,eAAC,IAAD,CAAKrK,UAAU,MAAf,UACI,cAAC,IAAD,CAAK2L,GAAI,EAAT,SACI,eAAC,IAAKZ,MAAN,WACI,cAAC,IAAKC,MAAN,CAAY0C,QAAQ,OAApB,wBACA,cAAC,IAAKtD,QAAN,CAAcxH,KAAK,cAG3B,cAAC,IAAD,CAAK+I,GAAI,EAAT,SACI,eAAC,IAAKZ,MAAN,WACI,cAAC,IAAKC,MAAN,CAAY0C,QAAQ,qBAApB,4BACA,cAAC,IAAKtD,QAAN,CAAcxH,KAAK,OAAO+K,UAAQ,qBAU5De,EAAc,WAChB,OACI,cAAC,IAAD,UACI,eAAC,IAAK5H,KAAN,WACI,oBAAI9G,UAAU,oBAAd,2BAEA,eAAC,IAAD,WACI,eAAC,IAAK+K,MAAN,CAAY/K,UAAU,OAAtB,UACI,cAAC,IAAKgL,MAAN,CAAY0C,QAAQ,gBAApB,mBACA,cAAC,IAAKtD,QAAN,CAAcxH,KAAK,QAAQ+G,KAAK,QAAQU,GAAG,gBAAgBR,YAAY,qBACvE,cAAC,IAAK7C,KAAN,gEAGJ,eAAC,IAAK+D,MAAN,CAAY/K,UAAU,OAAtB,UACI,cAAC,IAAKgL,MAAN,CAAY0C,QAAQ,mBAApB,sBACA,cAAC,IAAKtD,QAAN,CACIxH,KAAK,WACL+G,KAAK,WACLU,GAAG,mBACHR,YAAY,uBACZ8E,aAAa,aAIrB,cAAC,IAAK5D,MAAN,CAAY/K,UAAU,OAAOqK,GAAG,mBAAhC,SACI,cAAC,IAAKc,MAAN,CAAYvI,KAAK,WAAW8H,MAAM,mBAGtC,cAAC,IAAD,CAAQxF,QAAQ,UAAUtC,KAAK,SAA/B,6BASdgM,EAAiB,WACnB,OACI,cAAC,IAAD,UACI,eAAC,IAAK9H,KAAN,WACI,oBAAI9G,UAAU,oBAAd,6BACA,eAAC,IAAD,WACI,eAAC,IAAK+K,MAAN,CAAY1J,GAAIF,IAAKnB,UAAU,OAA/B,UACI,cAAC,IAAKgL,MAAN,CAAY0C,QAAQ,gBAAgBmB,QAAM,EAAClD,GAAI,EAA/C,mBAGA,eAAC,IAAD,CAAKA,GAAI,EAAT,UACI,cAAC,IAAKvB,QAAN,CAAcxH,KAAK,QAAQ+G,KAAK,QAAQU,GAAG,gBAAgBR,YAAY,qBACvE,cAAC,IAAK7C,KAAN,mEAIR,eAAC,IAAK+D,MAAN,CAAY1J,GAAIF,IAAKnB,UAAU,OAA/B,UACI,cAAC,IAAKgL,MAAN,CAAY0C,QAAQ,mBAAmBmB,QAAM,EAAClD,GAAI,EAAlD,sBAGA,cAAC,IAAD,CAAKA,GAAI,EAAT,SACI,cAAC,IAAKvB,QAAN,CACIxH,KAAK,WACL+G,KAAK,WACLU,GAAG,mBACHR,YAAY,uBACZ8E,aAAa,eAKzB,eAAC,IAAK5D,MAAN,CAAY1J,GAAIF,IAAKnB,UAAU,OAA/B,UACI,cAAC,IAAKgL,MAAN,CAAY0C,QAAQ,mBAAmBmB,QAAM,EAAClD,GAAI,EAAlD,yBAGA,cAAC,IAAD,CAAKA,GAAI,EAAT,SACI,cAAC,IAAKvB,QAAN,CACIxH,KAAK,WACL+G,KAAK,WACLU,GAAG,mBACHR,YAAY,uBACZ8E,aAAa,eAKzB,cAAC,IAAK5D,MAAN,CAAY1J,GAAIF,IAAKnB,UAAU,OAAO8N,UAAU,sBAAhD,SACI,cAAC,IAAD,CAAKnC,GAAI,CAAEmD,KAAM,EAAGC,OAAQ,GAA5B,SACI,cAAC,IAAK5D,MAAN,CAAYT,MAAM,oBAI1B,cAAC,IAAKK,MAAN,CAAY1J,GAAIF,IAAKnB,UAAU,OAAO8N,UAAU,sBAAhD,SACI,cAAC,IAAD,CAAKnC,GAAI,CAAEmD,KAAM,EAAGC,OAAQ,GAA5B,SACI,cAAC,IAAD,CAAQ7J,QAAQ,UAAUtC,KAAK,SAA/B,kCAWtBoM,EAAa,WACf,OACI,cAAC,IAAD,UACI,eAAC,IAAKlI,KAAN,WACI,oBAAI9G,UAAU,oBAAd,iCACA,eAAC,IAAD,CAAMA,UAAU,8CAAhB,UACI,qBAAKA,UAAU,SAAf,SACI,cAAC,IAAK+K,MAAN,CAAY/K,UAAU,uBAAtB,SACI,cAAC,IAAKoK,QAAN,CACIoD,UAAQ,EACR5K,KAAK,QACL+G,KAAK,QACLU,GAAG,gBACHjJ,SAAS,yBACTyI,YAAY,0BAKxB,qBAAK7J,UAAU,SAAf,SACI,cAAC,IAAK+K,MAAN,CAAY/K,UAAU,uBAAtB,SACI,cAAC,IAAKoK,QAAN,CACIxH,KAAK,WACL+G,KAAK,WACLU,GAAG,mBACHR,YAAY,uBACZ8E,aAAa,cAKzB,qBAAK3O,UAAU,SAAf,SACI,cAAC,IAAD,CAAQsN,MAAM,UAAU1K,KAAK,SAA7B,mCAMR,oBAAI5C,UAAU,eAAd,yBAEA,cAAC,IAAD,UACI,eAAC,IAAD,CAAKA,UAAU,qBAAf,UACI,eAAC,IAAD,CAAKiP,GAAG,OAAR,UACI,cAAC,IAAKjE,MAAN,CAAY0C,QAAQ,kBAAkBwB,gBAAc,EAApD,kBAGA,cAAC,IAAK9E,QAAN,CAAcpK,UAAU,OAAOqK,GAAG,kBAAkBR,YAAY,gBAEpE,eAAC,IAAD,CAAKoF,GAAG,OAAR,UACI,cAAC,IAAKjE,MAAN,CAAY0C,QAAQ,uBAAuBwB,gBAAc,EAAzD,sBAGA,eAAC,IAAD,CAAYlP,UAAU,OAAtB,UACI,cAAC,IAAWgH,KAAZ,gBACA,cAAC,IAAKoD,QAAN,CAAcC,GAAG,uBAAuBR,YAAY,mBAG5D,cAAC,IAAD,CAAKoF,GAAG,OAAR,SACI,cAAC,IAAK9D,MAAN,CAAYvI,KAAK,WAAWyH,GAAG,kBAAkBrK,UAAU,OAAO0K,MAAM,kBAE5E,cAAC,IAAD,CAAKuE,GAAG,OAAR,SACI,cAAC,IAAD,CAAQrM,KAAK,SAAS5C,UAAU,OAAhC,iCAWtBmP,EAA4B,WAC9B,OACI,mCACI,cAAC,IAAD,UACI,eAAC,IAAKrI,KAAN,WACI,oBAAI9G,UAAU,eAAd,0CACA,oBAAGA,UAAU,qBAAb,8BACqB,+CADrB,sCAIA,eAAC,IAAD,WACI,cAAC,IAAKgL,MAAN,CAAY6D,OAAO,KAAKhD,GAAI,EAA5B,wBAGA,cAAC,IAAD,UACI,cAAC,IAAKzB,QAAN,CAAcuC,KAAK,KAAK/J,KAAK,OAAOiH,YAAY,oBAGxD,uBACA,eAAC,IAAD,WACI,cAAC,IAAKmB,MAAN,CAAY6D,QAAM,EAAChD,GAAI,EAAvB,yBAGA,cAAC,IAAD,UACI,cAAC,IAAKzB,QAAN,CAAcxH,KAAK,OAAOiH,YAAY,qBAG9C,uBACA,eAAC,IAAD,WACI,cAAC,IAAKmB,MAAN,CAAY6D,OAAO,KAAKhD,GAAI,EAA5B,wBAGA,cAAC,IAAD,UACI,cAAC,IAAKzB,QAAN,CAAcuC,KAAK,KAAK/J,KAAK,OAAOiH,YAAY,4BAStEuF,EAAW,WACb,OACI,mCACI,cAAC,IAAD,UACI,eAAC,IAAKtI,KAAN,WACI,oBAAI9G,UAAU,eAAd,uBAEA,eAAC,IAAD,WACI,eAAC,IAAD,CAAKA,UAAU,OAAf,UACI,eAAC,IAAK+K,MAAN,CAAY1J,GAAIgO,IAAKvB,UAAU,gBAA/B,UACI,cAAC,IAAK9C,MAAN,oBACA,cAAC,IAAKZ,QAAN,CAAcxH,KAAK,QAAQiH,YAAY,mBAG3C,eAAC,IAAKkB,MAAN,CAAY1J,GAAIgO,IAAKvB,UAAU,mBAA/B,UACI,cAAC,IAAK9C,MAAN,uBACA,cAAC,IAAKZ,QAAN,CAAcxH,KAAK,WAAWiH,YAAY,mBAIlD,eAAC,IAAKkB,MAAN,CAAY/K,UAAU,OAAO8N,UAAU,mBAAvC,UACI,cAAC,IAAK9C,MAAN,sBACA,cAAC,IAAKZ,QAAN,CAAcP,YAAY,oBAG9B,eAAC,IAAKkB,MAAN,CAAY/K,UAAU,OAAO8N,UAAU,mBAAvC,UACI,cAAC,IAAK9C,MAAN,wBACA,cAAC,IAAKZ,QAAN,CAAcP,YAAY,mCAG9B,eAAC,IAAD,CAAK7J,UAAU,OAAf,UACI,eAAC,IAAK+K,MAAN,CAAY1J,GAAIgO,IAAKvB,UAAU,eAA/B,UACI,cAAC,IAAK9C,MAAN,mBACA,cAAC,IAAKZ,QAAN,OAGJ,eAAC,IAAKW,MAAN,CAAY1J,GAAIgO,IAAKvB,UAAU,gBAA/B,UACI,cAAC,IAAK9C,MAAN,oBACA,eAAC,IAAKE,OAAN,CAAayD,aAAa,YAA1B,UACI,+CACA,+CAIR,eAAC,IAAK5D,MAAN,CAAY1J,GAAIgO,IAAKvB,UAAU,cAA/B,UACI,cAAC,IAAK9C,MAAN,kBACA,cAAC,IAAKZ,QAAN,UAIR,cAAC,IAAKW,MAAN,CAAY/K,UAAU,OAAOqK,GAAG,mBAAhC,SACI,cAAC,IAAKc,MAAN,CAAYvI,KAAK,WAAW8H,MAAM,mBAGtC,cAAC,IAAD,CAAQxF,QAAQ,UAAUtC,KAAK,SAA/B,+BAiGT0M,UAvFI,WACf,OACI,qCACI,cAAC,IAAD,CACIC,gBAAiB,CACb,CAAE7E,MAAO,QAAS8E,KAAM,gBACxB,CAAE9E,MAAO,gBAAiB8E,KAAM,eAAgBC,QAAQ,IAE5DxP,MAAO,kBAGX,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAACkN,EAAD,QAIR,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAACU,EAAD,QAIR,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAK/G,KAAN,UACI,eAAC,IAAD,WACI,eAAC,IAAD,CAAK+E,GAAI,EAAT,UACI,cAACoC,EAAD,IACA,cAACC,EAAD,OAGJ,eAAC,IAAD,CAAKrC,GAAI,EAAT,UACI,oBAAI7L,UAAU,4BAAd,mCACA,sBAAKA,UAAU,OAAf,UACI,cAACmO,EAAD,IACA,cAACE,EAAD,IACA,cAACD,EAAD,qBAS5B,eAAC,IAAD,WACI,cAAC,IAAD,CAAKvC,GAAI,EAAT,SACI,cAACyC,EAAD,MAGJ,cAAC,IAAD,CAAKzC,GAAI,EAAT,SACI,cAAC0C,EAAD,SAIR,eAAC,IAAD,WACI,cAAC,IAAD,CAAK1C,GAAI,EAAT,SACI,cAAC6C,EAAD,MAGJ,cAAC,IAAD,CAAK7C,GAAI,EAAT,SACI,cAAC+C,EAAD,SAIR,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAACI,EAAD,QAIR,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAACG,EAAD,QAIR,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAACC,EAAD","file":"static/js/43.3d983e2d.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\ntype PageTitleProps = {\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import { useCallback } from 'react';\nimport useCommittedRef from './useCommittedRef';\nexport default function useEventCallback(fn) {\n  var ref = useCommittedRef(fn);\n  return useCallback(function () {\n    return ref.current && ref.current.apply(ref, arguments);\n  }, [ref]);\n}","import { useEffect, useRef } from 'react';\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\n\nfunction useCommittedRef(value) {\n  var ref = useRef(value);\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\n\nexport default useCommittedRef;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","const _excluded = [\"as\", \"disabled\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n\n  const meta = {\n    tagName\n  };\n\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    onClick == null ? void 0 : onClick(event);\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n\n    if (disabled) {\n      href = undefined;\n    }\n  }\n\n  return [{\n    role: 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    as: asProp,\n    disabled\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","import { useMemo } from 'react';\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nexport default useMergedRefs;","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import { useRef, useEffect } from 'react';\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\n\nexport default function useMounted() {\n  var mounted = useRef(true);\n  var isMounted = useRef(function () {\n    return mounted.current;\n  });\n  useEffect(function () {\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}","/**\n * Returns the owner document of a given element.\n * \n * @param node the element\n */\nexport default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\n\ntype VerticalFromProps = {\n    defaultValues?: Object,\n    resolver?: any,\n    children?: any,\n    onSubmit?: (value: any) => void,\n    formClass?: string,\n};\n\nconst VerticalForm = ({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps): React$Element<any> => {\n    /*\n     * form methods\n     */\n    const methods = useForm({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","// @flow\nimport React, { useState } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\n/* Password Input */\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}>\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ntype FormInputProps = {\n    label?: string,\n    type?: string,\n    name?: string,\n    placeholder?: string,\n    register?: any,\n    errors?: any,\n    className?: string,\n    labelClassName?: string,\n    containerClass?: string,\n    refCallback?: any,\n    children?: any,\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    ...otherProps\n}: FormInputProps): React$Element<React$FragmentType> => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'select' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                        <Form.Select\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            comp={comp}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}>\n                                            {children}\n                                        </Form.Select>\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <>\n                                    {type === 'checkbox' || type === 'radio' ? (\n                                        <>\n                                            <Form.Group className={containerClass}>\n                                                <Form.Check\n                                                    type={type}\n                                                    label={label}\n                                                    name={name}\n                                                    id={name}\n                                                    ref={(r) => {\n                                                        if (refCallback) refCallback(r);\n                                                    }}\n                                                    className={className}\n                                                    isInvalid={errors && errors[name] ? true : false}\n                                                    {...(register ? register(name) : {})}\n                                                    {...otherProps}\n                                                />\n\n                                                {errors && errors[name] ? (\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors[name]['message']}\n                                                    </Form.Control.Feedback>\n                                                ) : null}\n                                            </Form.Group>\n                                        </>\n                                    ) : (\n                                        <Form.Group className={containerClass}>\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                            <Form.Control\n                                                type={type}\n                                                placeholder={placeholder}\n                                                name={name}\n                                                id={name}\n                                                as={comp}\n                                                ref={(r) => {\n                                                    if (refCallback) refCallback(r);\n                                                }}\n                                                className={className}\n                                                isInvalid={errors && errors[name] ? true : false}\n                                                {...(register ? register(name) : {})}\n                                                {...otherProps}\n                                                autoComplete={name}>\n                                                {children ? children : null}\n                                            </Form.Control>\n\n                                            {errors && errors[name] ? (\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors[name]['message']}\n                                                </Form.Control.Feedback>\n                                            ) : null}\n                                        </Form.Group>\n                                    )}\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import addEventListener from './addEventListener';\nimport removeEventListener from './removeEventListener';\n\nfunction listen(node, eventName, handler, options) {\n  addEventListener(node, eventName, handler, options);\n  return function () {\n    removeEventListener(node, eventName, handler, options);\n  };\n}\n\nexport default listen;","/**\n * A `removeEventListener` ponyfill\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction removeEventListener(node, eventName, handler, options) {\n  var capture = options && typeof options !== 'boolean' ? options.capture : options;\n  node.removeEventListener(eventName, handler, capture);\n\n  if (handler.__once) {\n    node.removeEventListener(eventName, handler.__once, capture);\n  }\n}\n\nexport default removeEventListener;","import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n}), PropTypes.object]);","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: PropTypes.string,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","// @flow\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Row, Col, Card, Form, FloatingLabel, InputGroup, Button, Dropdown, DropdownButton } from 'react-bootstrap';\n\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { FormInput } from '../../components/';\n\nconst BasicInputElements = () => {\n    /*\n     * form methods\n     */\n    const methods = useForm({\n        defaultValues: {\n            password: '12345',\n            statictext: 'email@example.com',\n            color: '#727cf5',\n        },\n    });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Input Types</h4>\n                    <p className=\"text-muted\">\n                        Most common form control, text-based input fields. Includes support for all HTML5 types:{' '}\n                        <code>text</code>, <code>password</code>, <code>datetime</code>, <code>datetime-local</code>,{' '}\n                        <code>date</code>, <code>month</code>, <code>time</code>, <code>week</code>, <code>number</code>\n                        , <code>email</code>, <code>url</code>, <code>search</code>, <code>tel</code>, and{' '}\n                        <code>color</code>.\n                    </p>\n\n                    <Row>\n                        <Col lg={6}>\n                            <form onSubmit={handleSubmit()}>\n                                <FormInput\n                                    label=\"Text\"\n                                    type=\"text\"\n                                    name=\"text\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"text\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Email\"\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\"Email\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"email\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Show/Hide Password\"\n                                    type=\"password\"\n                                    name=\"password\"\n                                    placeholder=\"password placeholder\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"password\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Placeholder\"\n                                    type=\"text\"\n                                    name=\"placeholder\"\n                                    placeholder=\"placeholder\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"placeholder\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Text Area\"\n                                    type=\"textarea\"\n                                    name=\"textarea\"\n                                    rows=\"5\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"textarea\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Read only\"\n                                    type=\"text\"\n                                    name=\"text1\"\n                                    id=\"text1\"\n                                    placeholder=\"Readonly value\"\n                                    readOnly\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"text1\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Disabled\"\n                                    type=\"text\"\n                                    name=\"text2\"\n                                    id=\"text2\"\n                                    placeholder=\"Disabled value\"\n                                    disabled\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"text2\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Static control\"\n                                    type=\"text\"\n                                    name=\"statictext\"\n                                    placeholder=\"Disabled\"\n                                    plaintext\n                                    readOnly\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"statictext\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <Form.Group className=\"mb-3\">\n                                    <Form.Label htmlFor=\"text3\" className=\"form-label\">\n                                        Helping text\n                                    </Form.Label>\n                                    <Form.Control type=\"text\" name=\"text\" id=\"text3\" placeholder=\"Helping text\" />\n                                    <Form.Text>\n                                        A block of help text that breaks onto a new line and may extend beyond one line.\n                                    </Form.Text>\n                                </Form.Group>\n                            </form>\n                        </Col>\n\n                        <Col lg={6}>\n                            <form onSubmit={handleSubmit()}>\n                                <FormInput\n                                    name=\"select\"\n                                    label=\"Input Select\"\n                                    type=\"select\"\n                                    containerClass=\"mb-3\"\n                                    className=\"form-select\"\n                                    register={register}\n                                    key=\"select\"\n                                    errors={errors}\n                                    control={control}>\n                                    <option>1</option>\n                                    <option>2</option>\n                                    <option>3</option>\n                                    <option>4</option>\n                                    <option>5</option>\n                                </FormInput>\n\n                                <FormInput\n                                    name=\"selectMulti\"\n                                    label=\"Multiple Select\"\n                                    type=\"select\"\n                                    multiple\n                                    containerClass=\"mb-3\"\n                                    className=\"form-select\"\n                                    register={register}\n                                    key=\"selectMulti\"\n                                    errors={errors}\n                                    control={control}>\n                                    <option>1</option>\n                                    <option>2</option>\n                                    <option>3</option>\n                                    <option>4</option>\n                                    <option>5</option>\n                                </FormInput>\n\n                                <FormInput\n                                    label=\"Default file input\"\n                                    type=\"file\"\n                                    name=\"file\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"file\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Date\"\n                                    type=\"date\"\n                                    name=\"date\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"date\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Month\"\n                                    type=\"month\"\n                                    name=\"month\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"month\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Time\"\n                                    type=\"time\"\n                                    name=\"time\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"time\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Week\"\n                                    type=\"week\"\n                                    name=\"week\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"week\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Number\"\n                                    type=\"number\"\n                                    name=\"number\"\n                                    placeholder=\"number placeholder\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"number\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Color\"\n                                    type=\"color\"\n                                    name=\"color\"\n                                    placeholder=\"color placeholder\"\n                                    className=\"w-100\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    key=\"color\"\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <Form.Group className=\"mb-0\">\n                                    <Form.Label htmlFor=\"exampleRange\" className=\"form-label\">\n                                        Range\n                                    </Form.Label>\n                                    <Form.Range />\n                                </Form.Group>\n                            </form>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst FloatingLabels = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Floating labels</h4>\n                    <p className=\"text-muted\">\n                        Wrap a <code>&lt;Form.Control&gt;</code> element in <code>&lt;FloatingLabel&gt;</code>\n                        to enable floating labels with Bootstrap’s textual form fields. A <code>placeholder</code>\n                        is required on each <code>&lt;Form.Control&gt;</code> as our method of CSS-only floating labels\n                        uses the <code>:placeholder-shown</code> pseudo-element.\n                    </p>\n\n                    <Row>\n                        <Col lg={6}>\n                            <h5 className=\"mb-3\">Example</h5>\n                            <FloatingLabel controlId=\"floatingInput\" label=\"Email address\" className=\"mb-3\">\n                                <Form.Control type=\"email\" placeholder=\"name@example.com\" />\n                            </FloatingLabel>\n                            <FloatingLabel controlId=\"floatingPassword\" label=\"Password\">\n                                <Form.Control type=\"password\" placeholder=\"Password\" />\n                            </FloatingLabel>\n\n                            <h5 className=\"mb-3 mt-4\">Textareas</h5>\n                            <FloatingLabel controlId=\"floatingTextarea2\" label=\"Comments\">\n                                <Form.Control\n                                    as=\"textarea\"\n                                    placeholder=\"Leave a comment here\"\n                                    style={{ height: '100px' }}\n                                />\n                            </FloatingLabel>\n                        </Col>\n\n                        <Col lg={6}>\n                            <h5 className=\"mb-3\">Selects</h5>\n                            <FloatingLabel controlId=\"floatingSelect\" label=\"Works with selects\">\n                                <Form.Select aria-label=\"Floating label select example\">\n                                    <option>Open this select menu</option>\n                                    <option value=\"1\">One</option>\n                                    <option value=\"2\">Two</option>\n                                    <option value=\"3\">Three</option>\n                                </Form.Select>\n                            </FloatingLabel>\n\n                            <h5 className=\"mb-3 mt-4\">Layout</h5>\n                            <Row className=\"g-2\">\n                                <Col md>\n                                    <FloatingLabel controlId=\"floatingInputGrid\" label=\"Email address\">\n                                        <Form.Control type=\"email\" placeholder=\"name@example.com\" />\n                                    </FloatingLabel>\n                                </Col>\n                                <Col md>\n                                    <FloatingLabel controlId=\"floatingSelectGrid\" label=\"Works with selects\">\n                                        <Form.Select aria-label=\"Floating label select example\">\n                                            <option>Open this select menu</option>\n                                            <option value=\"1\">One</option>\n                                            <option value=\"2\">Two</option>\n                                            <option value=\"3\">Three</option>\n                                        </Form.Select>\n                                    </FloatingLabel>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst SelectInput = () => {\n    return (\n        <>\n            <h4 className=\"header-title\">Select menu</h4>\n            <p className=\"text-muted\">\n                Custom <code>&lt;select&gt;</code> menus need only a custom class, <code>.custom-select</code> to\n                trigger the custom styles.\n            </p>\n\n            <Form.Group>\n                <Form.Select className=\"custom-select mt-3\" aria-label=\"Default select example\">\n                    <option>1</option>\n                    <option>2</option>\n                    <option>3</option>\n                    <option>4</option>\n                    <option>5</option>\n                </Form.Select>\n            </Form.Group>\n        </>\n    );\n};\n\nconst Switches = () => {\n    return (\n        <>\n            <h4 className=\"header-title mt-4\">Switches</h4>\n            <p className=\"text-muted\">\n                A switch has the markup of a custom checkbox but uses the <code>.custom-switch</code> class to render a\n                toggle switch. Switches also support the <code>disabled</code> attribute.\n            </p>\n\n            <Form>\n                <Form.Check type=\"switch\" id=\"custom-switch\" label=\"Toggle this switch element\" />\n                <Form.Check\n                    disabled\n                    type=\"switch\"\n                    label=\"Disabled switch element\"\n                    id=\"disabled-custom-switch\"\n                    className=\"mt-1\"\n                />\n            </Form>\n        </>\n    );\n};\n\nconst CustomCheckboxes = () => {\n    return (\n        <>\n            <Form.Group>\n                <Form.Label className=\"form-label\" htmlFor=\"exampleCheckbox\">\n                    Checkboxes\n                </Form.Label>\n                <div>\n                    <Form.Check type=\"checkbox\" id=\"default-checkbox\" label=\"Check this custom checkbox\" />\n                    <Form.Check type=\"checkbox\" id=\"default-checkbox\" label=\"But not this disabled one\" disabled />\n                </div>\n            </Form.Group>\n        </>\n    );\n};\n\nconst InlineCustomCheckboxes = () => {\n    return (\n        <Form.Group className=\"mt-2\">\n            <Form.Label className=\"form-check-label\" htmlFor=\"exampleCheckbox\">\n                Inline\n            </Form.Label>\n            <div>\n                <Form.Check type=\"checkbox\" id=\"inline-checkbox\" label=\"An inline custom input\" />\n                <Form.Check type=\"checkbox\" id=\"inline-checkbox\" label=\"and another one\" />\n            </div>\n        </Form.Group>\n    );\n};\n\nconst CustomRadios = () => {\n    return (\n        <Form.Group className=\"mt-2\">\n            <Form.Label className=\"form-label\" htmlFor=\"exampleCheckbox\">\n                Radios\n            </Form.Label>\n            <div>\n                <Form.Check type=\"radio\" id=\"default-checkbox\" label=\"Check this custom checkbox\" />\n                <Form.Check type=\"radio\" id=\"default-checkbox\" label=\"But not this disabled one\" disabled />\n            </div>\n        </Form.Group>\n    );\n};\n\nconst InputSizes = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Sizes</h4>\n                <p className=\"text-muted\">\n                    Use size on <code>&lt;FormControl&gt;</code> and <code>&lt;FormLabel&gt;</code> to change the size\n                    of inputs and labels respectively.\n                </p>\n\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"small\">Small</Form.Label>\n                        <Form.Control type=\"text\" name=\"small\" id=\"small\" placeholder=\"Small\" size=\"sm\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"Normal\">Normal</Form.Label>\n                        <Form.Control type=\"text\" name=\"Normal\" id=\"Normal\" placeholder=\"Normal\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"Large\">Large</Form.Label>\n                        <Form.Control type=\"text\" name=\"Large\" id=\"Large\" placeholder=\"Large\" size=\"lg\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-0\">\n                        <Form.Label htmlFor=\"grid\">Grid Sizes</Form.Label>\n                        <Row>\n                            <Col sm={4}>\n                                <Form.Control type=\"text\" name=\"grid\" id=\"grid\" placeholder=\".col-sm-4\" />\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InputGroups = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Group</h4>\n                <p className=\"text-muted\">\n                    Easily extend form conrols by adding text, buttons, or button groups on either side of textual\n                    inputs, custom selects, and custom file inputs\n                </p>\n\n                <Form>\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Static\">Static</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                            <Form.Control\n                                placeholder=\"Username\"\n                                aria-label=\"Username\"\n                                aria-describedby=\"basic-addon1\"\n                            />\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Dropdown\">Dropdown</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <DropdownButton variant=\"primary\" title=\"Dropdown\" id=\"input-group-dropdown-1\">\n                                <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                                <Dropdown.Divider />\n                                <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n                            </DropdownButton>\n                            <Form.Control aria-label=\"Text input with dropdown button\" />\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Button\">Button</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <Form.Control\n                                placeholder=\"Recipient's username\"\n                                aria-label=\"Recipient's username\"\n                                aria-describedby=\"basic-addon2\"\n                            />\n                            <Button variant=\"dark\" id=\"button-addon2\">\n                                Button\n                            </Button>\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Row className=\"g-2\">\n                        <Col sm={6}>\n                            <Form.Group>\n                                <Form.Label htmlFor=\"file\">File input</Form.Label>\n                                <Form.Control type=\"file\" />\n                            </Form.Group>\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group>\n                                <Form.Label htmlFor=\"formFileMultiple01\">Multiple input</Form.Label>\n                                <Form.Control type=\"file\" multiple />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DefaultForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Basic Example</h4>\n\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"exampleEmail2\">Email</Form.Label>\n                        <Form.Control type=\"email\" name=\"email\" id=\"exampleEmail2\" placeholder=\"Enter your email\" />\n                        <Form.Text>We'll never share your email with anyone else.</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword2\">Password</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            name=\"password\"\n                            id=\"examplePassword2\"\n                            placeholder=\"password placeholder\"\n                            defaultValue=\"12345\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" id=\"formGridCheckbox\">\n                        <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HorizontalForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Horizontal Form</h4>\n                <Form>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"exampleEmail3\" column sm={3}>\n                            Email\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control type=\"email\" name=\"email\" id=\"exampleEmail3\" placeholder=\"Enter your email\" />\n                            <Form.Text>We'll never share your email with anyone else.</Form.Text>\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword3\" column sm={3}>\n                            Password\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword3\"\n                                placeholder=\"password placeholder\"\n                                defaultValue=\"12345\"\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword4\" column sm={3}>\n                            Re-Password\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword4\"\n                                placeholder=\"password placeholder\"\n                                defaultValue=\"12345\"\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"formHorizontalCheck\">\n                        <Col sm={{ span: 9, offset: 3 }}>\n                            <Form.Check label=\"Remember me\" />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-0\" controlId=\"formHorizontalCheck\">\n                        <Col sm={{ span: 9, offset: 3 }}>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Sign in\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InlineForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Inline Form Example</h4>\n                <Form className=\"row row-cols-lg-auto g-3 align-items-center\">\n                    <div className=\"col-12\">\n                        <Form.Group className=\"mb-2 me-sm-2 mb-sm-0\">\n                            <Form.Control\n                                readOnly\n                                type=\"email\"\n                                name=\"email\"\n                                id=\"exampleEmail4\"\n                                bsPrefix=\"form-control-plaintext\"\n                                placeholder=\"email@example.com\"\n                            />\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"col-12\">\n                        <Form.Group className=\"mb-2 me-sm-2 mb-sm-0\">\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword5\"\n                                placeholder=\"password placeholder\"\n                                defaultValue=\"12345\"\n                            />\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"col-12\">\n                        <Button color=\"primary\" type=\"submit\">\n                            Confirm identity\n                        </Button>\n                    </div>\n                </Form>\n\n                <h6 className=\"font-13 mt-3\">Auto-sizing</h6>\n\n                <Form>\n                    <Row className=\"align-items-center\">\n                        <Col xs=\"auto\">\n                            <Form.Label htmlFor=\"inlineFormInput\" visuallyHidden>\n                                Name\n                            </Form.Label>\n                            <Form.Control className=\"mb-2\" id=\"inlineFormInput\" placeholder=\"Jane Doe\" />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Form.Label htmlFor=\"inlineFormInputGroup\" visuallyHidden>\n                                Username\n                            </Form.Label>\n                            <InputGroup className=\"mb-2\">\n                                <InputGroup.Text>@</InputGroup.Text>\n                                <Form.Control id=\"inlineFormInputGroup\" placeholder=\"Username\" />\n                            </InputGroup>\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Form.Check type=\"checkbox\" id=\"autoSizingCheck\" className=\"mb-2\" label=\"Remember me\" />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Button type=\"submit\" className=\"mb-2\">\n                                Submit\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HorizontalFormLabelSizing = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Horizontal form label sizing</h4>\n                    <p className=\"text-muted font-14\">\n                        You can size the <code>&lt;FormLabel&gt;</code> using the column prop as shown.\n                    </p>\n\n                    <Row>\n                        <Form.Label column=\"lg\" lg={2}>\n                            Large Text\n                        </Form.Label>\n                        <Col>\n                            <Form.Control size=\"lg\" type=\"text\" placeholder=\"Large text\" />\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Form.Label column lg={2}>\n                            Normal Text\n                        </Form.Label>\n                        <Col>\n                            <Form.Control type=\"text\" placeholder=\"Normal text\" />\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Form.Label column=\"sm\" lg={2}>\n                            Small Text\n                        </Form.Label>\n                        <Col>\n                            <Form.Control size=\"sm\" type=\"text\" placeholder=\"Small text\" />\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst FormGrid = () => {\n    return (\n        <>\n            <Card>\n                <Card.Body>\n                    <h4 className=\"header-title\">Form Grid</h4>\n\n                    <Form>\n                        <Row className=\"mb-3\">\n                            <Form.Group as={Col} controlId=\"formGridEmail\">\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control type=\"email\" placeholder=\"Enter email\" />\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Password\" />\n                            </Form.Group>\n                        </Row>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formGridAddress1\">\n                            <Form.Label>Address</Form.Label>\n                            <Form.Control placeholder=\"1234 Main St\" />\n                        </Form.Group>\n\n                        <Form.Group className=\"mb-3\" controlId=\"formGridAddress2\">\n                            <Form.Label>Address 2</Form.Label>\n                            <Form.Control placeholder=\"Apartment, studio, or floor\" />\n                        </Form.Group>\n\n                        <Row className=\"mb-3\">\n                            <Form.Group as={Col} controlId=\"formGridCity\">\n                                <Form.Label>City</Form.Label>\n                                <Form.Control />\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridState\">\n                                <Form.Label>State</Form.Label>\n                                <Form.Select defaultValue=\"Choose...\">\n                                    <option>Choose...</option>\n                                    <option>...</option>\n                                </Form.Select>\n                            </Form.Group>\n\n                            <Form.Group as={Col} controlId=\"formGridZip\">\n                                <Form.Label>Zip</Form.Label>\n                                <Form.Control />\n                            </Form.Group>\n                        </Row>\n\n                        <Form.Group className=\"mb-3\" id=\"formGridCheckbox\">\n                            <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                        </Form.Group>\n\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nconst BasicForms = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/forms/basic' },\n                    { label: 'Form Elements', path: '/forms/basic', active: true },\n                ]}\n                title={'Form Elements'}\n            />\n\n            <Row>\n                <Col>\n                    <BasicInputElements />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <FloatingLabels />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col lg={6}>\n                                    <SelectInput />\n                                    <Switches />\n                                </Col>\n\n                                <Col lg={6}>\n                                    <h4 className=\"header-title mt-5 mt-sm-0\">Checkboxes and radios</h4>\n                                    <div className=\"mt-3\">\n                                        <CustomCheckboxes />\n                                        <CustomRadios />\n                                        <InlineCustomCheckboxes />\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <InputSizes />\n                </Col>\n\n                <Col lg={6}>\n                    <InputGroups />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <DefaultForm />\n                </Col>\n\n                <Col lg={6}>\n                    <HorizontalForm />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <InlineForm />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <HorizontalFormLabelSizing />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <FormGrid />\n                </Col>\n            </Row>\n        </>\n    );\n};\nexport default BasicForms;\n"],"sourceRoot":""}