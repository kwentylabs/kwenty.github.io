{"version":3,"sources":["components/PageTitle.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Row.js","pages/uikit/Alerts.js"],"names":["PageTitle","props","className","title","_excluded","useButtonProps","tagName","disabled","href","target","rel","onClick","tabIndex","type","meta","handleClick","event","trim","isTrivialHref","preventDefault","stopPropagation","undefined","role","onKeyDown","key","Button","React","_ref","ref","asProp","as","source","excluded","i","sourceKeys","Object","keys","length","indexOf","_objectWithoutPropertiesLoose","assign","buttonProps","Component","_jsx","displayName","Row","bsPrefix","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","classNames","colors","DefaultAlerts","Body","map","color","index","variant","DismissibleAlerts","useState","setColors","onClose","list","splice","handleClose","dismissible","AlertsWithIcon","icons","AlertsWithRichContent","CustomAlerts","AlertsWithLink","to","Alerts","breadCrumbItems","label","path","active","lg"],"mappings":"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","file":"static/js/105.3e98fe1b.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\ntype PageTitleProps = {\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","const _excluded = [\"as\", \"disabled\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n\n  const meta = {\n    tagName\n  };\n\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    onClick == null ? void 0 : onClick(event);\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n\n    if (disabled) {\n      href = undefined;\n    }\n  }\n\n  return [{\n    role: 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    as: asProp,\n    disabled\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","// @flow\nimport React, { useState } from 'react';\nimport { Row, Col, Card, Alert } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\nconst colors = ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'];\n\nconst DefaultAlerts = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Default Alert</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Provide contextual feedback messages for typical user actions with the handful of available and\n                    flexible alert messages. Alerts are available for any length of text, as well as an optional dismiss\n                    button.\n                </p>\n                <p>\n                    For proper styling, use one of the eight\n                    <strong>required</strong> contextual classes (e.g.,\n                    <code>.alert-success</code>). For background color use class\n                    <code>.bg-* </code>, <code>.text-white </code>\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Alert variant={color} key={index}>\n                            <strong>{color} - </strong> A simple {color} alert—check it out!\n                        </Alert>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DismissibleAlerts = () => {\n    const [colors, setColors] = useState([\n        'primary',\n        'secondary',\n        'success',\n        'danger',\n        'warning',\n        'info',\n        'light',\n        'dark',\n    ]);\n\n    /*\n     * handle close\n     */\n    const handleClose = (index) => {\n        const list = [...colors];\n        list.splice(index, 1);\n        setColors(list);\n    };\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Dismissing Alerts</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Add a dismiss button and the <code>.alert-dismissible</code> class, which adds extra padding to the\n                    right of the alert and positions the <code>.btn-close</code> button.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Alert variant={color} key={index} onClose={() => handleClose(index)} dismissible>\n                            <strong>{color} - </strong> A simple {color} alert—check it out!\n                        </Alert>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst AlertsWithIcon = () => {\n    const [colors] = useState(['success', 'danger', 'warning', 'info']);\n\n    const icons = ['dripicons-checkmark', 'dripicons-wrong', 'dripicons-warning', 'dripicons-information'];\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Icons with Alerts</h4>\n                <p className=\"text-muted font-14\">\n                    You can also include additional elements like icons, heading, etc along side the actual message.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Alert variant={color} key={index}>\n                            <i className={classNames(icons[index], 'me-2')}></i>This is a<strong>{color}</strong> alert\n                            - check it out!\n                        </Alert>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst AlertsWithRichContent = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Additional content</h4>\n                <p className=\"text-muted font-14\">\n                    Alerts can also contain additional HTML elements like headings, paragraphs and dividers.\n                </p>\n\n                <Alert variant=\"success\">\n                    <h4 className=\"alert-heading\">Well done!</h4>\n                    <p>\n                        Aww yeah, you successfully read this important alert message. This example text is going to run\n                        a bit longer so that you can see how spacing within an alert works with this kind of content.\n                    </p>\n                    <hr />\n                    <p className=\"mb-0\">\n                        Whenever you need to, be sure to use margin utilities to keep things nice and tidy.\n                    </p>\n                </Alert>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst CustomAlerts = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Custom Alerts</h4>\n                <p className=\"text-muted font-14\">\n                    Display alert with transparent background and with contextual text color. Use classes{' '}\n                    <code>.bg-white</code>, and <code>.text-*</code>. E.g. <code>bg-white text-primary</code>.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Alert variant={color} className={classNames('bg-white', 'text-' + color)} key={index}>\n                            This is a <strong>{color}</strong> alert—check it out!\n                        </Alert>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst AlertsWithLink = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Link Color</h4>\n                <p className=\"text-muted font-14\">\n                    Use the <code>.alert-link</code> utility class to quickly provide matching colored links within any\n                    alert.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Alert variant={color} key={index}>\n                            A simple {color} alert with{' '}\n                            <Link to=\"#\" className=\"alert-link\">\n                                an example link\n                            </Link>\n                            . Give it a click if you like.\n                        </Alert>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Alerts = (): React$Element<React$FragmentType> => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/alerts' },\n                    { label: 'Alerts', path: '/ui/alerts', active: true },\n                ]}\n                title={'Alerts'}\n            />\n\n            <Row>\n                <Col lg={6}>\n                    <DefaultAlerts />\n                </Col>\n\n                <Col lg={6}>\n                    <DismissibleAlerts />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <CustomAlerts />\n                </Col>\n                <Col lg={6}>\n                    <AlertsWithLink />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <AlertsWithIcon />\n                </Col>\n                <Col>\n                    <AlertsWithRichContent />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Alerts;\n"],"sourceRoot":""}